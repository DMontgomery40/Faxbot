{"0": {
    "doc": "Admin Demo",
    "title": "Admin Demo",
    "content": "Explore an interactive, simulated Faxbot Admin Console to learn the workflow without connecting to providers. | Live demo: https://faxbot.net/admin-demo/ | No files are transmitted; all data is in‑browser only | Try Inbox/Outbox, Compose, Contacts, and Settings views | . Next steps . | Move to your local Admin Console to connect a real backend via the Setup Wizard | Review Guides for quick wins and Backends to choose your provider | . ",
    "url": "/Faxbot/admin-demo/",
    
    "relUrl": "/admin-demo/"
  },"1": {
    "doc": "Annotated Demo (Interactive)",
    "title": "Annotated Admin Demo (Interactive)",
    "content": "This is a live, embedded view of the Admin Demo with overlay callouts. Use the Toggle Annotations button to see highlights for a typical “Compose and Send” flow. Toggle Annotations . &lt;div class=\"annot callout-nav-compose\"&gt; &lt;span class=\"label\"&gt;1) Open Compose&lt;/span&gt; &lt;span class=\"hint\"&gt;Click the Compose button in the left navigation&lt;/span&gt; &lt;/div&gt; &lt;div class=\"annot callout-to-field\"&gt; &lt;span class=\"label\"&gt;2) Recipient&lt;/span&gt; &lt;span class=\"hint\"&gt;Enter phone number in E.164 format (e.g., +15551234567)&lt;/span&gt; &lt;/div&gt; &lt;div class=\"annot callout-send-btn\"&gt; &lt;span class=\"label\"&gt;3) Send (Simulated)&lt;/span&gt; &lt;span class=\"hint\"&gt;Click to queue a demo fax and observe the Outbox&lt;/span&gt; &lt;/div&gt; . Notes . | This demo is simulated — no files are transmitted. For a real send, use your local Admin Console after backend configuration. | Annotations are approximate (responsive layout may shift elements). Toggle them off if they obscure your view. | . ",
    "url": "/Faxbot/admin-console/annotated-demo/#annotated-admin-demo-interactive",
    
    "relUrl": "/admin-console/annotated-demo/#annotated-admin-demo-interactive"
  },"2": {
    "doc": "Annotated Demo (Interactive)",
    "title": "Annotated Demo (Interactive)",
    "content": " ",
    "url": "/Faxbot/admin-console/annotated-demo/",
    
    "relUrl": "/admin-console/annotated-demo/"
  },"3": {
    "doc": "API Keys and Smoke Test",
    "title": "API Keys and Smoke Test",
    "content": "Enable API key requirement . | In Settings → Security, set API_KEY | Clients must send X-API-Key: &lt;value&gt; | . Smoke test (curl) . curl -X POST \"$BASE/fax\" \\ -H \"X-API-Key: $API_KEY\" \\ -F to=+15551234567 \\ -F file=@./document.pdf . Then: . curl -H \"X-API-Key: $API_KEY\" \"$BASE/fax/$JOB_ID\" . SDK test . | Node and Python include error mappings for 400/401/404/413/415 | . Troubleshooting . | 401: header missing or incorrect value | 415: only PDF/TXT allowed | 413: file exceeds MAX_FILE_SIZE_MB | . ",
    "url": "/Faxbot/guides/api-keys-smoke-test/",
    
    "relUrl": "/guides/api-keys-smoke-test/"
  },"4": {
    "doc": "API Reference",
    "title": "API Reference",
    "content": " ",
    "url": "/Faxbot/development/api-reference.html",
    
    "relUrl": "/development/api-reference.html"
  },"5": {
    "doc": "API Reference",
    "title": "Base URL",
    "content": ". | Default: http://localhost:8080 | Health: GET /health → { \"status\": \"ok\" } | . ",
    "url": "/Faxbot/development/api-reference.html#base-url",
    
    "relUrl": "/development/api-reference.html#base-url"
  },"6": {
    "doc": "API Reference",
    "title": "Auth",
    "content": ". | Header X-API-Key: &lt;key&gt; if API_KEY is set in environment. | If API_KEY is blank, auth is disabled (not recommended). | . ",
    "url": "/Faxbot/development/api-reference.html#auth",
    
    "relUrl": "/development/api-reference.html#auth"
  },"7": {
    "doc": "API Reference",
    "title": "Endpoints",
    "content": "1) POST /fax . | Multipart form . | to: destination number (E.164 or digits) | file: PDF or TXT | . | Responses . | 202 Accepted: { id, to, status, error?, pages?, backend, provider_sid?, created_at, updated_at } | 400 bad number; 413 file too large; 415 unsupported type; 401 invalid API key | . | Example curl -X POST http://localhost:8080/fax \\ -H \"X-API-Key: $API_KEY\" \\ -F to=+15551234567 \\ -F file=@./example.pdf . | . 2) GET /fax/{id} . | Returns job status as above. | 404 if not found; 401 if invalid API key. curl -H \"X-API-Key: $API_KEY\" http://localhost:8080/fax/$JOB_ID . | . 3) GET /fax/{id}/pdf?token=... | Serves the original PDF for cloud provider to fetch. | No API auth; requires token that matches stored URL. | 403 invalid/expired token; 404 not found. | . 4) POST /phaxio-callback . | For Phaxio status webhooks. Expects form-encoded fields (e.g., fax[status], fax[id]). | Correlation via query param ?job_id=.... | Returns { status: \"ok\" }. | Signature verification: if PHAXIO_VERIFY_SIGNATURE=true (default), the server verifies X-Phaxio-Signature (HMAC-SHA256 of the raw body using PHAXIO_API_SECRET). Requests without a valid signature are rejected (401). | . ",
    "url": "/Faxbot/development/api-reference.html#endpoints",
    
    "relUrl": "/development/api-reference.html#endpoints"
  },"8": {
    "doc": "API Reference",
    "title": "Models",
    "content": ". | FaxJobOut . | id: string | to: string | | status: string (queued | in_progress | SUCCESS | FAILED | disabled) | . | error?: string | pages?: number | backend: string (“phaxio”, “sinch”, or “sip”) | provider_sid?: string | created_at: ISO8601 | updated_at: ISO8601 | . | . ",
    "url": "/Faxbot/development/api-reference.html#models",
    
    "relUrl": "/development/api-reference.html#models"
  },"9": {
    "doc": "API Reference",
    "title": "Notes",
    "content": ". | Backend chosen via FAX_BACKEND env var: phaxio (cloud via Phaxio/Phaxio‑by‑Sinch V2 style), sinch (cloud via Sinch Fax API v3 direct upload), or sip (self‑hosted Asterisk). | TXT files are converted to PDF before TIFF conversion. | If Ghostscript is missing, TIFF step is stubbed with pages=1; install for production. | For the phaxio backend, TIFF conversion is skipped; page count is finalized via the provider callback (/phaxio-callback, HMAC verification supported). | For the sinch backend, the API uploads your PDF directly to Sinch. Webhook support is under evaluation; status reflects the provider’s immediate response and may be updated by polling in future versions. | Tokenized PDF access has a TTL (PDF_TOKEN_TTL_MINUTES, default 60). The /fax/{id}/pdf?token=... link expires after TTL. | Optional retention: enable automatic cleanup of artifacts by setting ARTIFACT_TTL_DAYS&gt;0 (default disabled). Cleanup runs every CLEANUP_INTERVAL_MINUTES (default 1440). | . ",
    "url": "/Faxbot/development/api-reference.html#notes",
    
    "relUrl": "/development/api-reference.html#notes"
  },"10": {
    "doc": "API Reference",
    "title": "Phone Numbers",
    "content": ". | Preferred format: E.164 (e.g., +15551234567). | Validation: API accepts + and 6–20 digits. | Cloud path (Phaxio): the service may attempt best‑effort normalization for non‑E.164 input; provide E.164 to avoid ambiguity. | . ",
    "url": "/Faxbot/development/api-reference.html#phone-numbers",
    
    "relUrl": "/development/api-reference.html#phone-numbers"
  },"11": {
    "doc": "API Reference",
    "title": "Audit Logging (Optional)",
    "content": ". | Enable structured audit logs for SIEM ingestion: . | AUDIT_LOG_ENABLED=true | AUDIT_LOG_FORMAT=json (default) | AUDIT_LOG_FILE=/var/log/faxbot_audit.log (optional) | AUDIT_LOG_SYSLOG=true and AUDIT_LOG_SYSLOG_ADDRESS=/dev/log (optional) | . | Events: job_created, job_dispatch, job_updated, job_failed, pdf_served. | Logs contain job IDs and metadata only (no PHI). Plugin Management (feature: plugins) . | GET /plugins — list installed plugins (providers and storage). Admin auth required. | GET /plugins/{id}/config — get current enabled/settings for a plugin. Admin auth required. | PUT /plugins/{id}/config — persist enabled/settings to server config file. Admin auth required. | GET /plugin-registry — curated registry with descriptions/links. | . Notes . | Changes are persisted but not applied live; backend selection at runtime continues to use environment until explicitly applied during maintenance. | . ",
    "url": "/Faxbot/development/api-reference.html#audit-logging-optional",
    
    "relUrl": "/development/api-reference.html#audit-logging-optional"
  },"12": {
    "doc": "REST API",
    "title": "REST API",
    "content": "Base URL . | Default: http://localhost:8080 | Some features require PUBLIC_API_URL to be set for cloud backends | . Auth . | Header X-API-Key: &lt;token&gt; when API_KEY is set on the server | . POST /fax . | Multipart form: to (string), file (PDF or TXT) | Returns 202 Accepted with job info: { id, to, status, backend, created_at, updated_at } | Errors: 400 invalid to or params, 401 auth, 413 too large, 415 unsupported type | . GET /fax/{id} . | Returns latest job status and metadata | Errors: 401 auth, 404 not found | . GET /fax/{id}/pdf . | For cloud providers to fetch the PDF | Query: token (per‑job token, optional expiry) | Errors: 403 invalid/expired token, 404 not available | . POST /phaxio-callback . | Provider webhook (form data) with optional signature verification | Include ?job_id={jobId} to correlate | . Health . | GET /health → { status: \"ok\" } | . Notes . | Phone validation accepts E.164 or digits (+15551234567, 15551234567) | Max upload size is MAX_FILE_SIZE_MB (default 10 MB) | Allowed content types: application/pdf, text/plain | . ",
    "url": "/Faxbot/api/",
    
    "relUrl": "/api/"
  },"13": {
    "doc": "Authentication (API Keys)",
    "title": "Authentication (API Keys)",
    "content": "Header . | Send X-API-Key: &lt;token&gt; on every request when enabled. | . Enable . | In Admin Console → Settings → Security, set API_KEY. | Or via environment: API_KEY=.... | . Scopes (roadmap alignment) . | Outbound: fax:send, fax:read | Inbound: inbound:list, inbound:read | Admin: keys:manage, admin:plugins:read, admin:plugins:write | . Tips . | Require API keys in production; use different values for dev vs prod. | Combine with reverse‑proxy rate limits for defense‑in‑depth. | . ",
    "url": "/Faxbot/security/authentication/",
    
    "relUrl": "/security/authentication/"
  },"14": {
    "doc": "Changelog",
    "title": "Changelog",
    "content": "All notable changes to the Faxbot MCP server will be documented in this file. ",
    "url": "/Faxbot/development/changelog.html",
    
    "relUrl": "/development/changelog.html"
  },"15": {
    "doc": "Changelog",
    "title": "[2.0.0] - 2025-01-XX",
    "content": "Added . | Complete MCP 2.0 integration with modern standards | Streamable HTTP transport for cloud deployment | Enhanced tool output schemas for better AI interaction | Advanced security controls and permissions | Real-time progress notifications | Comprehensive error handling and validation | Auto-configuration for Claude Desktop, Cursor, and system PATH | One-click installer with platform detection | Support for both stdio and HTTP transports | Priority queuing and metadata support | Comprehensive logging and monitoring | . Changed . | Renamed from “Open Fax by Codex” to “Faxbot” | Updated to MCP SDK 2.0 standards | Enhanced tool definitions with structured schemas | Improved installation experience | Better error messages and user feedback | . Technical . | Node.js 18+ requirement | Modern JavaScript with ES6+ features | Joi validation for all inputs | Express.js for HTTP transport | Helmet.js for security | Winston for structured logging | . ",
    "url": "/Faxbot/development/changelog.html#200---2025-01-xx",
    
    "relUrl": "/development/changelog.html#200---2025-01-xx"
  },"16": {
    "doc": "Changelog",
    "title": "[1.0.0] - Previous",
    "content": "Added . | Initial MCP integration | Basic fax sending functionality | T.38 protocol support via Asterisk | PDF and TXT file support | SQLite job tracking | Docker deployment support | . ",
    "url": "/Faxbot/development/changelog.html#100---previous",
    
    "relUrl": "/development/changelog.html#100---previous"
  },"17": {
    "doc": "Contributing",
    "title": "Contributing to Faxbot",
    "content": "Thanks for your interest in Faxbot! Whether you’re reporting a bug, requesting a feature, or contributing code, we’re here to help. ",
    "url": "/Faxbot/contributing/#contributing-to-faxbot",
    
    "relUrl": "/contributing/#contributing-to-faxbot"
  },"18": {
    "doc": "Contributing",
    "title": "Getting Help",
    "content": "Don’t hesitate to open an issue. Seriously. Faxbot has many moving parts, and we’d rather help you get unstuck than have you struggle alone. ",
    "url": "/Faxbot/contributing/#getting-help",
    
    "relUrl": "/contributing/#getting-help"
  },"19": {
    "doc": "Contributing",
    "title": "When Opening an Issue",
    "content": "To help us assist you quickly, please include: . Your Configuration . | Backend: Which backend are you using? (phaxio, sinch, sip, or FAX_DISABLED=true for testing) | Compliance: Are you bound by HIPAA requirements, or are you a non-healthcare user? | MCP Integration (if applicable): . | Which MCP server? (Node.js stdio/HTTP/SSE, or Python stdio/SSE) | Which transport? (stdio, HTTP, or SSE+OAuth) | . | . What Happened . | Expected behavior: What did you think would happen? | Actual behavior: What actually happened? | Steps to reproduce: How can we recreate the issue? | . Supporting Information . | Logs: Relevant log output (see note about PHI/PII below) | Screenshots: If applicable, especially for UI-related issues | Environment: Docker, local development, cloud deployment? | . ⚠️ Important: Protect PHI/PII . Never include protected health information (PHI) or personally identifiable information (PII) in issues, logs, or screenshots. This includes: . | Phone numbers | Patient names or identifiers | Document contents | API keys or secrets | . Redact sensitive information with [REDACTED] or *** before sharing. ",
    "url": "/Faxbot/contributing/#when-opening-an-issue",
    
    "relUrl": "/contributing/#when-opening-an-issue"
  },"20": {
    "doc": "Contributing",
    "title": "Types of Contributions",
    "content": "Bug Reports . Use the issue template and include the configuration details above. Feature Requests . Describe your use case and why the feature would be valuable. Consider which backends it would apply to. Code Contributions . | Fork the repository | Create a feature branch (git checkout -b feature/amazing-feature) | Make your changes | Test across relevant backends (see Testing) | Commit with clear messages | Push to your branch | Open a Pull Request | . ",
    "url": "/Faxbot/contributing/#types-of-contributions",
    
    "relUrl": "/contributing/#types-of-contributions"
  },"21": {
    "doc": "Contributing",
    "title": "Testing",
    "content": "Faxbot supports multiple backends and configurations. When contributing code: . | Test Mode: Use FAX_DISABLED=true for development—no actual faxes are sent | Backend-Specific: If your change affects a specific backend, test with that backend | MCP Changes: Test the relevant MCP transport (stdio/HTTP/SSE) | SDK Changes: Test both Node.js and Python SDKs if applicable | . ",
    "url": "/Faxbot/contributing/#testing",
    
    "relUrl": "/contributing/#testing"
  },"22": {
    "doc": "Contributing",
    "title": "Code Style",
    "content": ". | Python: Follow PEP 8, use black for formatting | JavaScript/Node.js: Use ESLint configuration in the project | Documentation: Update relevant docs in docs/ directory | . ",
    "url": "/Faxbot/contributing/#code-style",
    
    "relUrl": "/contributing/#code-style"
  },"23": {
    "doc": "Contributing",
    "title": "Security Considerations",
    "content": "Faxbot handles sensitive healthcare data. When contributing: . | Never commit API keys, secrets, or test PHI | Consider HIPAA implications for new features | Use secure defaults | Document security requirements clearly | . ",
    "url": "/Faxbot/contributing/#security-considerations",
    
    "relUrl": "/contributing/#security-considerations"
  },"24": {
    "doc": "Contributing",
    "title": "Questions?",
    "content": "Open an issue with the “question” label. We’re happy to help you understand the codebase, architecture decisions, or how to implement your use case. The maintainers are friendly and want Faxbot to succeed. Don’t be shy! . ",
    "url": "/Faxbot/contributing/#questions",
    
    "relUrl": "/contributing/#questions"
  },"25": {
    "doc": "Contributing",
    "title": "Contributing",
    "content": ". ",
    "url": "/Faxbot/contributing/",
    
    "relUrl": "/contributing/"
  },"26": {
    "doc": "Deployment",
    "title": "Deployment",
    "content": "Services . | api: FastAPI service (required) | asterisk: SIP/Asterisk backend (only for FAX_BACKEND=sip) | faxbot-mcp: MCP server (optional) | . Ports . | 8080: API | 3001: MCP HTTP (Node) | 3002: MCP SSE (Node) | 3003: MCP SSE (Python) | SIP/Asterisk only: 5060 (SIP), 5038 (AMI internal), 4000-4999 (UDPTL) | . Storage and database . | FAX_DATA_DIR for PDFs/TIFFs (default ./faxdata) | SQLite for dev; use Postgres in production (DATABASE_URL) | S3/S3‑compatible for inbound artifacts; for SSE‑KMS see AWS docs below | . Public URL and TLS . | Set PUBLIC_API_URL to your HTTPS endpoint | ENFORCE_PUBLIC_HTTPS=true for production with cloud backends | For quick testing, use a tunnel: . | Cloudflare Tunnel: https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/do-more-with-tunnels/trycloudflare/ | ngrok (HTTP): https://ngrok.com/docs/guides/http/ | . | . Artifacts cleanup . | ARTIFACT_TTL_DAYS to delete old PDFs/TIFFs after completion | CLEANUP_INTERVAL_MINUTES controls sweep frequency | . Security . | Set API_KEY and require X-API-Key header | Never expose AMI (5038) publicly | Use HTTPS for callbacks and public endpoints | . References . | AWS S3 SSE‑KMS: https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html | Third‑Party docs: /third-party/ | . ",
    "url": "/Faxbot/deployment/",
    
    "relUrl": "/deployment/"
  },"27": {
    "doc": "Diagnostics Matrix",
    "title": "Diagnostics Matrix",
    "content": "Each check maps to a fix, relevant environment variables, and the UI path to change it. Backend: Phaxio . | Missing API key/secret . | Fix: set PHAXIO_API_KEY, PHAXIO_API_SECRET | UI: Settings → Backend → Phaxio | . | Callback unreachable or unset . | Fix: set PHAXIO_CALLBACK_URL (or PHAXIO_STATUS_CALLBACK_URL) to &lt;PUBLIC_API_URL&gt;/phaxio-callback | UI: Settings → Backend → Phaxio; also verify PUBLIC_API_URL in Settings → Security | . | Signature verification disabled . | Fix: enable PHAXIO_VERIFY_SIGNATURE=true | UI: Settings → Backend → Phaxio (Verify signatures) | . | . Backend: Sinch . | Missing project/credentials . | Fix: set SINCH_PROJECT_ID, SINCH_API_KEY, SINCH_API_SECRET | UI: Settings → Backend → Sinch | . | Wrong region/base URL . | Fix: set SINCH_BASE_URL to the correct regional endpoint | UI: Settings → Backend → Sinch | . | . Backend: SIP/Asterisk . | AMI unreachable or auth failed . | Fix: verify ASTERISK_AMI_HOST, ASTERISK_AMI_PORT, ASTERISK_AMI_USERNAME, ASTERISK_AMI_PASSWORD | UI: Settings → Backend → SIP/Asterisk | . | TIFF conversion unavailable . | Fix: install Ghostscript (gs) on API host | UI: N/A — server dependency; rerun Diagnostics after install | . | . Public URL / HTTPS . | Missing or HTTP in production . | Fix: set PUBLIC_API_URL to your HTTPS domain; enable ENFORCE_PUBLIC_HTTPS=true | UI: Settings → Security | . | . Security posture . | API key not required . | Fix: set API_KEY to a strong value; restart if necessary | UI: Settings → Security | . | Audit logging off (HIPAA profile) . | Fix: AUDIT_LOG_ENABLED=true; optionally configure file/syslog | UI: Settings → Security → Audit | . | . Storage (Inbound) . | Local path unwritable . | Fix: check FAX_DATA_DIR permissions or switch to S3 | UI: Settings → Storage | . | S3 not accessible . | Fix: verify bucket/region/prefix/endpoint; use role/env credentials; (optional) enable diagnostics for HeadBucket | UI: Settings → Storage | . | . File limits . | Uploads rejected as too large . | Fix: raise MAX_FILE_SIZE_MB and communicate the limit in the UI | UI: Settings → Security → File limits | . | . Actions . | After each change, click “Apply &amp; Reload” and rerun Diagnostics | Use “Restart API” when prompted (if enabled) for backend client reinitialization | . ",
    "url": "/Faxbot/admin-console/diagnostics-matrix/",
    
    "relUrl": "/admin-console/diagnostics-matrix/"
  },"28": {
    "doc": "Diagnostics",
    "title": "Diagnostics",
    "content": "Run environment checks and get targeted guidance. Checks . | API health and version | Backend configuration . | Phaxio: API keys present, callback URL reachability hints, signature verification state | Sinch: project ID and credentials present; base URL sanity | SIP/Asterisk: AMI connectivity and authentication, Ghostscript availability for PDF→TIFF | . | Public URL . | PUBLIC_API_URL presence and HTTPS enforcement if enabled | . | Storage . | Local path writable (dev) | Optional S3 access checks (when diagnostics enabled) | . | Security posture . | API key required, HTTPS enforced, audit logging enabled, file size limit | . | . Actions . | “Restart API” (if allowed) to reinitialize backends after settings changes | Copy suggested .env snippets for fixes | . If something fails . | Follow the actionable link beside the check (e.g., Backends, Security) | See Troubleshooting | . Related docs . | Backends: Phaxio, Sinch, SIP/Asterisk | Security: Authentication, HIPAA, OAuth/OIDC | Deployment: Guide | Third‑Party: /third-party/ | . ",
    "url": "/Faxbot/admin-console/diagnostics/",
    
    "relUrl": "/admin-console/diagnostics/"
  },"29": {
    "doc": "HIPAA Requirements",
    "title": "HIPAA_REQUIREMENTS.md",
    "content": "This document describes what is required to operate Faxbot in a HIPAA‑aligned manner. It is a technical guide and checklist for engineers and operators. It is not legal advice. Always consult your compliance team and counsel. You (the operator) are responsible for implementing and documenting the controls below and for executing a formal risk analysis and governance program. ",
    "url": "/Faxbot/security/hipaa-requirements.html#hipaa_requirementsmd",
    
    "relUrl": "/security/hipaa-requirements.html#hipaa_requirementsmd"
  },"30": {
    "doc": "HIPAA Requirements",
    "title": "Scope &amp; Data Flows",
    "content": ". | Covered workflows: sending faxes that may contain PHI. | Not covered: receiving faxes (non‑goal), messaging, IVR, EHR integrations. | . Backends (choose one): . | Phaxio (cloud): Client → Faxbot API → Phaxio → PSTN/Fax. Phaxio fetches the PDF from your PUBLIC_API_URL and posts status callbacks. | SIP/Asterisk (self‑hosted): Client → Faxbot API → Asterisk (T.38/UDPTL) → SIP trunk → PSTN/Fax. | . PHI touchpoints: . | PDF/TXT upload to Faxbot API. | Stored job artifacts (original, PDF, TIFF for SIP). | Status updates (Phaxio callbacks or Asterisk AMI user events). | Application/Reverse proxy logs (must be PHI‑free). | . ",
    "url": "/Faxbot/security/hipaa-requirements.html#scope--data-flows",
    
    "relUrl": "/security/hipaa-requirements.html#scope--data-flows"
  },"31": {
    "doc": "HIPAA Requirements",
    "title": "Roles &amp; Agreements",
    "content": ". | If you are a Covered Entity or Business Associate, you must: . | Execute a BAA with any cloud provider that may handle PHI (e.g., Phaxio). Contact provider sales to obtain a BAA; do not use without a BAA. | Treat Faxbot and Asterisk operators as Business Associates if they are separate entities. | . | Self‑hosted SIP stack does not remove HIPAA obligations; it moves them to you. | . ",
    "url": "/Faxbot/security/hipaa-requirements.html#roles--agreements",
    
    "relUrl": "/security/hipaa-requirements.html#roles--agreements"
  },"32": {
    "doc": "HIPAA Requirements",
    "title": "Technical Safeguards (Security Rule)",
    "content": "Implement the following as minimum controls: . 1) Transport security . | Public API must be served over HTTPS. Use TLS certs from a reputable CA. | For Phaxio backend: . | PUBLIC_API_URL must be HTTPS in production. | Enable callback signature verification (default on): PHAXIO_VERIFY_SIGNATURE=true. Server verifies X-Phaxio-Signature (HMAC‑SHA256 over raw body with PHAXIO_API_SECRET). | . | For SIP backend: . | SIP signaling should use TLS if supported by your provider; media (T.38 over UDPTL) is typically not encrypted. Mitigate with a site‑to‑site VPN/private interconnect to your SIP provider and strict firewalling. | Never expose AMI (5038/tcp) to the public internet. | . | . 2) Access control . | Require API key on all /fax and /fax/{id} calls (X-API-Key). Do not run with blank API_KEY in production. | Restrict inbound traffic with a reverse proxy: IP allowlists and rate limiting. | Rotate credentials and set a strong AMI password. Do not use changeme. | . 3) Data minimization &amp; confidentiality . | Do not log PHI. Ensure request bodies (PDF/TXT) and rendered content are never logged. | Faxbot redacts tokenized PDF URLs from logs. | Tokenized PDF access: . | The server issues a per‑job, random pdf_token with a short TTL (PDF_TOKEN_TTL_MINUTES, default 60). The /fax/{job_id}/pdf endpoint requires exact token equality and enforces expiry. | Keep TTL as short as operationally feasible. | . | . 4) Storage security (at rest) . | Store database and artifacts on encrypted volumes or use a managed, encrypted database. SQLite is acceptable only if disk encryption and backups are in place. | Separate storage for development vs production. Limit admin access and use MFA on hosts. | Data retention policy: delete PDFs/TIFFs after transmission completes and your minimum retention requirement is satisfied. | . 5) Integrity &amp; auditing . | Maintain audit logs of access to /fax/{job_id}/pdf, job creation, and status changes. No PHI in logs; use job IDs and metadata only. | Time synchronize servers (NTP) for accurate audit trails. | . 6) Availability &amp; recovery . | Back up database (and optionally artifacts) on a secure, encrypted target with rotation. | Document restore procedures and test periodically. | . ",
    "url": "/Faxbot/security/hipaa-requirements.html#technical-safeguards-security-rule",
    
    "relUrl": "/security/hipaa-requirements.html#technical-safeguards-security-rule"
  },"33": {
    "doc": "HIPAA Requirements",
    "title": "Administrative Safeguards",
    "content": ". | Perform and document a HIPAA risk analysis for this system, covering threats to confidentiality, integrity, and availability. | Draft and adopt policies: access control, incident response, change management, data retention/secure destruction, vulnerability management. | Train workforce members on PHI handling and minimum necessary principles. | Maintain vendor due diligence (e.g., Phaxio BAA, SOC2 reports where applicable). | . ",
    "url": "/Faxbot/security/hipaa-requirements.html#administrative-safeguards",
    
    "relUrl": "/security/hipaa-requirements.html#administrative-safeguards"
  },"34": {
    "doc": "HIPAA Requirements",
    "title": "Physical Safeguards",
    "content": ". | Secure data center/hosting environment. For on‑prem: locked server rooms, visitor controls. For cloud: select providers with appropriate attestations. | . ",
    "url": "/Faxbot/security/hipaa-requirements.html#physical-safeguards",
    
    "relUrl": "/security/hipaa-requirements.html#physical-safeguards"
  },"35": {
    "doc": "HIPAA Requirements",
    "title": "Backend‑Specific Guidance",
    "content": "Phaxio (Cloud) . | Required: . | BAA with Phaxio before sending PHI. | HTTPS PUBLIC_API_URL, valid certificate. | PHAXIO_VERIFY_SIGNATURE=true. | Strong API_KEY and reverse proxy restrictions. | . | Recommended: . | Keep PDF_TOKEN_TTL_MINUTES small (e.g., 15–60 minutes). | Immediately delete PDFs after successful transmission unless retention policy requires otherwise. | Validate that PHAXIO_STATUS_CALLBACK_URL is reachable only over TLS. | . | . SIP/Asterisk (Self‑Hosted) . | T.38/UDPTL is not encrypted. Mitigations: . | Use a site‑to‑site VPN/private interconnect to your SIP provider, or run Asterisk in a private data center with dedicated connectivity. | Strict firewall allows only necessary ports and only to/from provider IPs. | Use SIP TLS for signaling if supported by your provider; still keep media protected by VPN. | . | Asterisk hardening: . | Do not expose AMI externally. Bind to private networks only. | Use non‑default usernames, strong secrets, fail2ban/IDS. | Rotate credentials periodically. Log and alert on failed auth. | . | . ",
    "url": "/Faxbot/security/hipaa-requirements.html#backendspecific-guidance",
    
    "relUrl": "/security/hipaa-requirements.html#backendspecific-guidance"
  },"36": {
    "doc": "HIPAA Requirements",
    "title": "MCP (AI Assistant) Considerations",
    "content": ". | Stdio vs HTTP/SSE transports . | Stdio (local): connects tools directly to desktop assistants without a network server. Convenient for individuals. Not generally used for provider‑side HIPAA workflows. | HTTP/SSE (server): network transports that can be authenticated (API key, OAuth2/JWT) and deployed under your security program. Use SSE+OAuth for provider‑side HIPAA workflows. | . | File handling . | For stdio, prefer send_fax with filePath to avoid embedding PHI as base64 in conversations. | For HTTP/SSE, tool inputs are JSON; base64 increases size and token exposure. Enforce auth and rate limits and avoid logging request bodies. | . | Do not send PHI to LLMs or external services unless covered by a BAA and approved by policy. Faxbot’s MCP servers call your Faxbot API; they do not upload PHI to model providers. | All MCP servers must require authentication where applicable: . | REST API: X-API-Key for /fax endpoints. | MCP HTTP/SSE: Authorization: Bearer &lt;JWT&gt; verified against your OIDC JWKS. | . | Serve MCP over TLS. Never log PHI (file content, rendered pages). Log only job IDs and metadata. | . ",
    "url": "/Faxbot/security/hipaa-requirements.html#mcp-ai-assistant-considerations",
    
    "relUrl": "/security/hipaa-requirements.html#mcp-ai-assistant-considerations"
  },"37": {
    "doc": "HIPAA Requirements",
    "title": "Roles and Transport Choice (Practical Guidance)",
    "content": ". | Healthcare providers (CE/BA): use HTTPS for API, phaxio with HMAC or sinch with auth; for MCP use SSE+OAuth or skip MCP and call REST/SDKs directly. | Patients/individuals sending their own documents: HIPAA obligations differ; using local stdio MCP is generally acceptable. The receiving provider bears most compliance obligations upon receipt. Providers must still secure inbound faxes on their systems. | . ",
    "url": "/Faxbot/security/hipaa-requirements.html#roles-and-transport-choice-practical-guidance",
    
    "relUrl": "/security/hipaa-requirements.html#roles-and-transport-choice-practical-guidance"
  },"38": {
    "doc": "HIPAA Requirements",
    "title": "Operational Checklist (Minimum)",
    "content": ". | Signed BAA with Phaxio (if using cloud backend). | TLS everywhere (HTTPS for public endpoints; VPN/private link for SIP media). | API auth enabled (API_KEY set). Reverse proxy with IP allowlist + rate limiting. | MCP auth enforced (OAuth2 Bearer required for HTTP/SSE MCP). | Callback signature verification enabled (PHAXIO_VERIFY_SIGNATURE=true). | Tokenized PDF access enabled with short TTL (PDF_TOKEN_TTL_MINUTES). | Logs do not contain PHI; tokens redacted; job IDs only. | Encrypted storage for DB and artifacts; backups configured. | Data retention policy implemented (delete artifacts after N days or on success). | Asterisk AMI not exposed; strong credentials; fail2ban. | Risk analysis, policies, and training documented. | . ",
    "url": "/Faxbot/security/hipaa-requirements.html#operational-checklist-minimum",
    
    "relUrl": "/security/hipaa-requirements.html#operational-checklist-minimum"
  },"39": {
    "doc": "HIPAA Requirements",
    "title": "Current Implementation Status (2025‑Q3)",
    "content": ". | Implemented: . | API key support, reverse proxy guidance. | Tokenized PDF access with equality check and TTL expiry. | Phaxio callback signature verification (HMAC‑SHA256). | AMI concurrency/backoff improvements; SIP dialplan emits granular results. | Docs for HTTPS, rate limiting, NAT/port‑forwarding. | . | Gaps (operator‑dependent): . | Encryption at rest (volume or DB) is operator‑managed. | Automated retention cleanup (cron/job) recommended (see below). | Centralized audit logging &amp; alerting recommended. | . | . ",
    "url": "/Faxbot/security/hipaa-requirements.html#current-implementation-status-2025q3",
    
    "relUrl": "/security/hipaa-requirements.html#current-implementation-status-2025q3"
  },"40": {
    "doc": "HIPAA Requirements",
    "title": "Remediation Plan &amp; Roadmap",
    "content": "1) Automate artifact retention . | Add ARTIFACT_TTL_DAYS env with a daily cleanup job to purge PDFs/TIFFs older than TTL when job status is final. | . 2) Configurable audit logging . | Structured logs with job lifecycle events; optional sink to SIEM. | . 3) Optional hard fail on plain HTTP . | Reject PUBLIC_API_URL with http:// in non‑local environments unless ALLOW_INSECURE_PUBLIC_URL=true. | . 4) Secrets management . | Guidance and examples for loading secrets from a vault (AWS/GCP/Azure) instead of env files. | . 5) Provider‑specific SIP hardening . | Example configs for TLS signaling and site‑to‑site VPN topologies. | . ",
    "url": "/Faxbot/security/hipaa-requirements.html#remediation-plan--roadmap",
    
    "relUrl": "/security/hipaa-requirements.html#remediation-plan--roadmap"
  },"41": {
    "doc": "HIPAA Requirements",
    "title": "Example: Retention Cleanup (Operator)",
    "content": ". | Create a cron or systemd timer to delete artifacts after N days: # delete PDFs/TIFFs older than 7 days find /path/to/faxdata -type f \\( -name '*.pdf' -o -name '*.tiff' \\) -mtime +7 -delete . | Ensure backups honor retention and secure destruction policies. | . ",
    "url": "/Faxbot/security/hipaa-requirements.html#example-retention-cleanup-operator",
    
    "relUrl": "/security/hipaa-requirements.html#example-retention-cleanup-operator"
  },"42": {
    "doc": "HIPAA Requirements",
    "title": "Legal Notice",
    "content": ". | This document does not constitute legal advice. HIPAA compliance depends on your specific implementation, vendor agreements, and organizational controls. Engage qualified counsel and security professionals. | . ",
    "url": "/Faxbot/security/hipaa-requirements.html#legal-notice",
    
    "relUrl": "/security/hipaa-requirements.html#legal-notice"
  },"43": {
    "doc": "HIPAA Requirements",
    "title": "HIPAA Requirements",
    "content": " ",
    "url": "/Faxbot/security/hipaa-requirements.html",
    
    "relUrl": "/security/hipaa-requirements.html"
  },"44": {
    "doc": "Hospital (HIPAA)",
    "title": "Hospital Playbook (HIPAA)",
    "content": "Audience . | Non‑technical staff and IT who must send PHI securely. | . Goal . | Send a document to a known fax number in under 5 minutes with safe defaults. | . Steps 1) Open Admin Console → Setup Wizard . | Backend: Phaxio (Recommended) | Security Profile: HIPAA | Enter API key/secret from the Phaxio console | Set Callback URL to &lt;PUBLIC_API_URL&gt;/phaxio-callback | Apply &amp; Reload 2) Public URL | If needed, create a temporary tunnel for testing (Cloudflare) | Update PUBLIC_API_URL to the HTTPS URL 3) Send | Admin Console → Send → select your PDF or TXT → enter destination and send 4) Verify | Admin Console → Jobs: confirm it shows In Progress → Success/Failed | . Tips . | Only PDF and TXT are allowed; scan/Image → convert to PDF first | Keep file under 10 MB (default limit); split if necessary | . If it fails . | Use Diagnostics → follow links for fix steps (callback reachability, signature verification, HTTPS) | . Compliance . | BAA with Phaxio | PHAXIO_VERIFY_SIGNATURE=true, ENFORCE_PUBLIC_HTTPS=true, API_KEY required | Audit logging enabled per policy | . ",
    "url": "/Faxbot/playbooks/hospital/#hospital-playbook-hipaa",
    
    "relUrl": "/playbooks/hospital/#hospital-playbook-hipaa"
  },"45": {
    "doc": "Hospital (HIPAA)",
    "title": "Hospital (HIPAA)",
    "content": " ",
    "url": "/Faxbot/playbooks/hospital/",
    
    "relUrl": "/playbooks/hospital/"
  },"46": {
    "doc": "Images & PDFs",
    "title": "Images vs Text PDFs",
    "content": "Most real‑world faxes in 2025 are images — scans of insurance cards, lab results, driver’s licenses, or signed forms. Faxbot supports two content types only: PDF and TXT. This guide explains how to handle image content correctly and how to balance file size with HIPAA concerns. Quick guidance . | If you have a PDF that is a scan/photo (image‑based): send it as‑is. Use send_fax with filePath (stdio) or upload the PDF via the REST API/SDKs. | If you have a pure text document: paste text into a .txt file and send as TXT, or export to a text‑based PDF and send that. | If you have images (PNG/JPG): convert to PDF first, then send. | . Conversions . | macOS Preview: File → Export As… → Format: PDF | macOS CLI: sips -s format pdf \"in.png\" --out \"out.pdf\" | Linux: img2pdf in.png -o out.pdf or magick convert in.png out.pdf | Windows: open image → Print → “Microsoft Print to PDF” | . MCP tooling: which option to use? . | send_fax with filePath (stdio) — recommended for all PDFs (image or text). Sends the original file. | HTTP/SSE MCP transports — require base64; keep files small where possible, or prefer stdio with filePath for local usage. Node MCP JSON limit is ~16 MB; API raw limit is 10 MB. | . File size and quality . | API default limit is MAX_FILE_SIZE_MB=10. | For scans, use 150–200 DPI and grayscale when possible to reduce size without losing readability. | For personal/one‑off use (patients): local stdio MCP with filePath avoids base64 bloat; token limits don’t apply. | . HIPAA considerations . | Healthcare providers (Covered Entities/Business Associates): use HIPAA‑aligned transports and controls. | Prefer OAuth‑protected SSE MCP for assistant integrations or use the REST API/SDKs directly. | Use HTTPS for PUBLIC_API_URL (Phaxio) and enable signature verification. | . | Patients (sending their own documents): HIPAA obligations differ; using local stdio MCP is generally acceptable because you are not a covered entity and Faxbot does not receive faxes. Providers still must protect inbound faxes on their side. | . Troubleshooting . | “Unsupported file type”: only PDF and TXT are accepted. Convert images to PDF. | Shell path issues with spaces/odd characters: quote the entire path or rename using a wildcard (e.g., cp Screenshot*.pdf card.pdf). | . ",
    "url": "/Faxbot/backends/images-and-pdfs.html#images-vs-text-pdfs",
    
    "relUrl": "/backends/images-and-pdfs.html#images-vs-text-pdfs"
  },"47": {
    "doc": "Images & PDFs",
    "title": "Images & PDFs",
    "content": " ",
    "url": "/Faxbot/backends/images-and-pdfs.html",
    
    "relUrl": "/backends/images-and-pdfs.html"
  },"48": {
    "doc": "Inbound (WIP)",
    "title": "Inbound (Work in Progress)",
    "content": "Inbound receiving scaffolding is planned per v3 design. Current API focuses on outbound. Planned shape . | Enable via INBOUND_ENABLED=true | Cloud callbacks: . | Phaxio: POST /phaxio-inbound with HMAC verification | Sinch: POST /sinch-inbound (Basic and/or HMAC) | . | Self‑hosted (SIP/Asterisk): POST /_internal/asterisk/inbound on private network | Storage backends: STORAGE_BACKEND=local|s3 with KMS and S3‑compatible endpoints | Access: GET /inbound, GET /inbound/{id}, GET /inbound/{id}/pdf (tokenized) | . Notes . | Keep PHI secure; use S3 with SSE‑KMS in production | UI: enablement toggles, retention, token TTLs, and scoped access | . ",
    "url": "/Faxbot/inbound/#inbound-work-in-progress",
    
    "relUrl": "/inbound/#inbound-work-in-progress"
  },"49": {
    "doc": "Inbound (WIP)",
    "title": "Inbound (WIP)",
    "content": " ",
    "url": "/Faxbot/inbound/",
    
    "relUrl": "/inbound/"
  },"50": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": "Welcome to Faxbot! This section will help you get up and running quickly. ",
    "url": "/Faxbot/getting-started/#getting-started",
    
    "relUrl": "/getting-started/#getting-started"
  },"51": {
    "doc": "Getting Started",
    "title": "What is Faxbot?",
    "content": "Faxbot is the first and only open-source, self-hostable fax API that combines: . | Simple REST API for sending faxes | Multiple backend options (cloud and self-hosted) | AI assistant integration via MCP | HIPAA compliance features | Developer SDKs for Node.js and Python | . Need HIPAA? Use Phaxio or SSE+OAuth. For local dev, you can disable faxing with FAX_DISABLED=true. ",
    "url": "/Faxbot/getting-started/#what-is-faxbot",
    
    "relUrl": "/getting-started/#what-is-faxbot"
  },"52": {
    "doc": "Getting Started",
    "title": "Choose Your Path",
    "content": ". | Phaxio (Cloud, recommended): start here for a 5‑minute setup. | Phaxio Setup Guide | . | Sinch Fax API v3 (Cloud): direct upload flow for “Phaxio by Sinch” accounts. | Sinch Setup Guide | . | SIP/Asterisk (Self‑Hosted): full control, no per‑fax cloud charges. | SIP/Asterisk Setup Guide | . | . Receiving . | When enabled, received faxes appear in the Admin Console inbox and are accessible via the API. See the API Reference. | . After the API is running, optionally add AI assistant control: . | MCP Integration | . ",
    "url": "/Faxbot/getting-started/#choose-your-path",
    
    "relUrl": "/getting-started/#choose-your-path"
  },"53": {
    "doc": "Getting Started",
    "title": "Quick Checks",
    "content": ". | GET /health returns { \"status\": \"ok\" } when the API is up | X-API-Key header is required if API_KEY is set | Max upload size defaults to 10 MB (configurable) | . ",
    "url": "/Faxbot/getting-started/#quick-checks",
    
    "relUrl": "/getting-started/#quick-checks"
  },"54": {
    "doc": "Getting Started",
    "title": "Next Steps",
    "content": ". | Review Security if handling PHI | Explore the Admin Console for keys, jobs, inbound inbox, diagnostics, and settings | Try the SDKs to integrate quickly | . ",
    "url": "/Faxbot/getting-started/#next-steps",
    
    "relUrl": "/getting-started/#next-steps"
  },"55": {
    "doc": "Getting Started",
    "title": "Need Help?",
    "content": "Don’t hesitate to ask questions! See our Contributing guide for the best way to get help. ",
    "url": "/Faxbot/getting-started/#need-help",
    
    "relUrl": "/getting-started/#need-help"
  },"56": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": ". ",
    "url": "/Faxbot/getting-started/",
    
    "relUrl": "/getting-started/"
  },"57": {
    "doc": "Home",
    "title": "Admin Console",
    "content": "Faxbot includes a local Admin Console for keys, jobs, inbound inbox, diagnostics, and settings. | Guide: Admin Console | Demo UI: https://faxbot.net/admin-demo/ (simulated data) | . Questions? Issues? Please don’t hesitate to reach out. See CONTRIBUTING.md for the best way to get help. ",
    "url": "/Faxbot/#admin-console",
    
    "relUrl": "/#admin-console"
  },"58": {
    "doc": "Home",
    "title": "Table of Contents",
    "content": ". | Getting Started . | Overview | . | Backends . | Phaxio Setup | Sinch Setup | SIP/Asterisk Setup | Images &amp; PDFs | . | AI Integration . | Overview | MCP Integration | Node MCP | . | Plugins . | Overview (see main docs) | SIP Provider Plugins (see main docs) | . | Security . | Overview | HIPAA Requirements | OAuth Setup | . | Development . | Overview | API Reference | Client SDKs | Troubleshooting | Phaxio E2E Test | Node.js SDK | Python SDK | Changelog | . | . ",
    "url": "/Faxbot/#table-of-contents",
    
    "relUrl": "/#table-of-contents"
  },"59": {
    "doc": "Home",
    "title": "Enterprise Services",
    "content": "Need custom integrations with platforms like Spruce and other healthcare communication tools, or a managed deployment with BAAs? We provide enterprise services while keeping Faxbot open‑source and self‑hostable. | Learn more: https://faxbot.net/compliance | Contact: mailto:david@faxbot.com | . ",
    "url": "/Faxbot/#enterprise-services",
    
    "relUrl": "/#enterprise-services"
  },"60": {
    "doc": "Home",
    "title": "Home",
    "content": ". The first and only open-source, self-hostable fax API. Send and receive faxes with a single function call. Operate everything via a local Admin Console. Yes, this repo might look overwhelming at first glance—that’s only because Faxbot supports multiple backends (cloud and self-hosted), several MCP transport options for AI integration, and HIPAA-compliant security configurations. Most users will only need one path through this complexity. Core API: Send and receive faxes with a simple REST surface. See the API Reference. Why Faxbot . | Open source and self‑hostable end‑to‑end: run it entirely on your infra, modify as needed. | One API, many backends: switch Phaxio ↔ Sinch ↔ self‑hosted SIP/Asterisk via environment settings. | Bring‑your‑own SIP trunk: choose any SIP provider; migrate later by changing a couple of env vars. | Fully local option: when using SIP, no third‑party cloud in the path; artifacts stay on your storage (S3/MinIO supported). | AI assistant tools built‑in: MCP servers (Node &amp; Python) for stdio/HTTP/SSE; desktop stdio supports filePath (no base64 size pain). | Inbound receiving: cloud webhooks with signature verification or Asterisk ReceiveFAX → TIFF→PDF, mailbox routing, short‑TTL tokens, retention windows. | Test/dev backend: simulate send/receive flows without hitting a paid provider. | Vendor‑neutral SDKs: identical Node/Python clients so your app code is portable. | . ",
    "url": "/Faxbot/",
    
    "relUrl": "/"
  },"61": {
    "doc": "Security",
    "title": "Security &amp; Compliance",
    "content": "Faxbot is designed to handle sensitive healthcare data and can be configured for HIPAA compliance. ",
    "url": "/Faxbot/security/#security--compliance",
    
    "relUrl": "/security/#security--compliance"
  },"62": {
    "doc": "Security",
    "title": "Security Features",
    "content": ". | API Authentication: X-API-Key header protection | HTTPS Enforcement: TLS 1.2+ for all communications | Webhook Verification: HMAC signature validation | OAuth2/JWT Support: Enterprise-grade authentication for MCP | Audit Logging: Comprehensive logging for compliance | PHI Protection: Configurable data handling policies | . ",
    "url": "/Faxbot/security/#security-features",
    
    "relUrl": "/security/#security-features"
  },"63": {
    "doc": "Security",
    "title": "Compliance Considerations",
    "content": "Healthcare Users (HIPAA Required) . | Must use secure backends with Business Associate Agreements (BAAs) | HTTPS enforcement required | Audit logging enabled | Strong authentication mandatory | . BAAs &amp; Audits (Enterprise) . If we host or operate Faxbot for you, we sign BAAs through a streamlined process and provide architecture documentation for reviews. We welcome security assessments and audits of our stack. See https://faxbot.net/compliance for an overview and contact options. Non-Healthcare Users . | Relaxed security settings available for convenience | Optional authentication | Reduced logging overhead | HTTP allowed in development | . This documentation provides technical guidance, not legal advice. Always consult your compliance team and legal counsel for HIPAA requirements. ",
    "url": "/Faxbot/security/#compliance-considerations",
    
    "relUrl": "/security/#compliance-considerations"
  },"64": {
    "doc": "Security",
    "title": "Security",
    "content": ". ",
    "url": "/Faxbot/security/",
    
    "relUrl": "/security/"
  },"65": {
    "doc": "Development",
    "title": "Developer Guides",
    "content": "Resources for building against the Faxbot API and SDKs. For contributing to the project itself, see the top‑level Contributing page. ",
    "url": "/Faxbot/development/#developer-guides",
    
    "relUrl": "/development/#developer-guides"
  },"66": {
    "doc": "Development",
    "title": "API Reference",
    "content": "Complete documentation of all REST API endpoints, request/response formats, and error codes. ",
    "url": "/Faxbot/development/#api-reference",
    
    "relUrl": "/development/#api-reference"
  },"67": {
    "doc": "Development",
    "title": "Client SDKs",
    "content": "Pre-built client libraries for Node.js and Python that handle authentication, file uploads, and error handling. ",
    "url": "/Faxbot/development/#client-sdks",
    
    "relUrl": "/development/#client-sdks"
  },"68": {
    "doc": "Development",
    "title": "Testing &amp; Troubleshooting",
    "content": "Guides for testing your integration and resolving common issues. ",
    "url": "/Faxbot/development/#testing--troubleshooting",
    
    "relUrl": "/development/#testing--troubleshooting"
  },"69": {
    "doc": "Development",
    "title": "Local Docs Preview",
    "content": "Run the docs site locally: . cd docs bundle install bundle exec jekyll serve . ",
    "url": "/Faxbot/development/#local-docs-preview",
    
    "relUrl": "/development/#local-docs-preview"
  },"70": {
    "doc": "Development",
    "title": "Advanced Features",
    "content": ". | End-to-end testing workflows | Custom backend development | Performance optimization | Monitoring and observability | . ",
    "url": "/Faxbot/development/#advanced-features",
    
    "relUrl": "/development/#advanced-features"
  },"71": {
    "doc": "Development",
    "title": "Development",
    "content": ". ",
    "url": "/Faxbot/development/",
    
    "relUrl": "/development/"
  },"72": {
    "doc": "Admin Console",
    "title": "Admin Console",
    "content": "The local Admin Console helps you manage keys, jobs, inbound inbox, diagnostics, and settings without editing .env files by hand. | Local‑only by default; protect with API keys and loopback restrictions | Works alongside any backend (Phaxio, Sinch, SIP/Asterisk) | Provides copy‑ready configuration lines after validation | . ",
    "url": "/Faxbot/admin-console/",
    
    "relUrl": "/admin-console/"
  },"73": {
    "doc": "Admin Console",
    "title": "Usage",
    "content": ". | Access at http://localhost:8080/admin/ui/ when the API is running | Use an admin‑scoped API key to log in (or bootstrap key in development) | Explore tabs for Dashboard, Send, Jobs, Inbound, Keys, Settings, Diagnostics | . Plugins (preview) . | When enabled by the server, a Plugins tab appears to help operators view installed providers and persist an outbound selection to the server’s config file. This does not change the running backend immediately; apply changes during maintenance windows. | Enable by setting FEATURE_V3_PLUGINS=true on the API. The tab uses /plugins and related endpoints with admin authentication. | . ",
    "url": "/Faxbot/admin-console/#usage",
    
    "relUrl": "/admin-console/#usage"
  },"74": {
    "doc": "Admin Console",
    "title": "Demo (Simulated)",
    "content": ". | Hosted demo with simulated data: https://faxbot.net/admin-demo/ | No external calls; intended for showcasing the workflow | . ",
    "url": "/Faxbot/admin-console/#demo-simulated",
    
    "relUrl": "/admin-console/#demo-simulated"
  },"75": {
    "doc": "Admin Console",
    "title": "Live Apply &amp; Export",
    "content": ". | Setup Wizard: choose a backend (Phaxio/Sinch/SIP), enter credentials, pick security defaults (require API key, enforce HTTPS, audit logging), then click “Apply &amp; Reload”. | Changes apply in‑process immediately. | Click “Generate .env” to export a snippet for persistence across restarts. | . | Settings: quick edits for backend/security and selected provider fields. | Click “Apply &amp; Reload” to take effect immediately. | Backend/storage changes may require a restart to initialize provider clients (e.g., Asterisk AMI) or swap storage drivers safely. | . | . ",
    "url": "/Faxbot/admin-console/#live-apply--export",
    
    "relUrl": "/admin-console/#live-apply--export"
  },"76": {
    "doc": "Admin Console",
    "title": "Persisted Settings (v2)",
    "content": ". | Enable loading of a server-side .env on startup: toggle “Load persisted .env at startup” in Settings (sets ENABLE_PERSISTED_SETTINGS=true). | Save the current configuration to a persisted file by clicking “Save .env to server”. | Default path: /faxdata/faxbot.env (lives on the faxdata volume). | You can still export and download the .env if you prefer manual review. | . | Notes . | When enabled, the API loads values from the persisted file before constructing settings, overriding process environment. | Keep this feature local-only and behind the Admin Console gate. | . | . ",
    "url": "/Faxbot/admin-console/#persisted-settings-v2",
    
    "relUrl": "/admin-console/#persisted-settings-v2"
  },"77": {
    "doc": "Admin Console",
    "title": "Restart (Optional)",
    "content": ". | If ADMIN_ALLOW_RESTART=true, the Diagnostics page shows a “Restart API” button. | This triggers a controlled process exit so your container manager (e.g., Docker) restarts the API. | If the flag is not set, the button returns “Restart not allowed”. | . | . ",
    "url": "/Faxbot/admin-console/#restart-optional",
    
    "relUrl": "/admin-console/#restart-optional"
  },"78": {
    "doc": "Admin Console",
    "title": "Storage (S3)",
    "content": ". | To use S3 for inbound artifacts, set STORAGE_BACKEND=s3 and S3 values (S3_BUCKET, S3_REGION, optional S3_PREFIX, S3_ENDPOINT_URL, S3_KMS_KEY_ID). | IAM credentials must come from the runtime (environment or role). The Admin Console does not store or display secrets. | Validate S3: . | Enable ENABLE_S3_DIAGNOSTICS=true on the API to allow Diagnostics to HeadBucket and surface checks.storage.accessible. | Otherwise, Diagnostics will show only presence checks. | Best practice: apply settings, then run Diagnostics to verify access, and perform an end‑to‑end inbound test. | . | . ",
    "url": "/Faxbot/admin-console/#storage-s3",
    
    "relUrl": "/admin-console/#storage-s3"
  },"79": {
    "doc": "Admin Console",
    "title": "Dashboard &amp; Diagnostics",
    "content": ". | Dashboard shows the live backend (phaxio/sinch/sip) and simple queue stats. After applying settings, it reflects the new backend. | Diagnostics runs a comprehensive check (backend credentials/config, storage, inbound flags, security posture) and shows recommendations. | . ",
    "url": "/Faxbot/admin-console/#dashboard--diagnostics",
    
    "relUrl": "/admin-console/#dashboard--diagnostics"
  },"80": {
    "doc": "Admin Console",
    "title": "Inbound Controls (v2)",
    "content": ". | Toggle inbound receiving on/off and configure retention/token TTL in Settings. | Backend-specific auth: . | SIP/Asterisk: set ASTERISK_INBOUND_SECRET for the private /_internal/asterisk/inbound route. | Phaxio: enable HMAC verification for inbound webhooks. | Sinch: configure Basic auth and/or HMAC verification for inbound callbacks. | . | . ",
    "url": "/Faxbot/admin-console/#inbound-controls-v2",
    
    "relUrl": "/admin-console/#inbound-controls-v2"
  },"81": {
    "doc": "Admin Console",
    "title": "Outbound PDFs (v2)",
    "content": ". | From Jobs, open a job to view details and download the outbound PDF (admin-only). The API generates a PDF per job before dispatching to the selected backend. ",
    "url": "/Faxbot/admin-console/#outbound-pdfs-v2",
    
    "relUrl": "/admin-console/#outbound-pdfs-v2"
  },"82": {
    "doc": "Admin Console",
    "title": "MCP (v2)",
    "content": "| Embedded Python MCP SSE server is available under /mcp/sse. | In the UI (MCP tab), enable SSE and optionally require OAuth/JWT. | Health check: “SSE Healthy” chip reflects /mcp/sse/health status. | “Claude Desktop Config” block provides a copy‑ready config snippet. | Notes . | For HIPAA, enable OAuth/JWT and configure issuer/audience/JWKS. | When disabled, SSE runs without auth for local development only. | Changing MCP flags requires an API restart (use Restart in UI). | . | . ",
    "url": "/Faxbot/admin-console/#mcp-v2",
    
    "relUrl": "/admin-console/#mcp-v2"
  },"83": {
    "doc": "Plugins",
    "title": "Plugins",
    "content": "Faxbot v3 supports modular provider plugins that bind to capability slots at runtime. The plugin type follows the capability, not the transport or protocol. | Outbound fax → FaxPlugin (category: outbound) | Inbound fax → delegated handlers in core + plugin helpers (category: inbound) | Messaging → MessagingPlugin (category: messaging) | Auth → AuthPlugin (category: auth) | Storage → StoragePlugin (category: storage) | . Key rule: protocols like SIP are transports, not capabilities. Choose the plugin base class based on what the plugin does. ",
    "url": "/Faxbot/plugins/",
    
    "relUrl": "/plugins/"
  },"84": {
    "doc": "Operator Playbooks",
    "title": "Operator Playbooks",
    "content": "Step‑by‑step, GUI‑first workflows tailored for common roles. | Hospital (HIPAA) | Real Estate | Legal | . ",
    "url": "/Faxbot/playbooks/",
    
    "relUrl": "/playbooks/"
  },"85": {
    "doc": "Backends",
    "title": "Fax Backends",
    "content": "Faxbot supports multiple backends for sending faxes. Choose the one that best fits your needs: . ",
    "url": "/Faxbot/backends/#fax-backends",
    
    "relUrl": "/backends/#fax-backends"
  },"86": {
    "doc": "Backends",
    "title": "Backend Comparison",
    "content": "| Feature | Phaxio | Sinch | SIP/Asterisk | . | Setup Time | 5 minutes | 10 minutes | 1-2 hours | . | Telephony Knowledge | None required | None required | T.38/SIP expertise | . | Cost Model | Pay per fax | Pay per fax | SIP trunk only | . | Control Level | Limited | Limited | Full control | . | HIPAA Ready | Yes (with BAA) | Yes (with BAA) | Yes (self-hosted) | . ",
    "url": "/Faxbot/backends/#backend-comparison",
    
    "relUrl": "/backends/#backend-comparison"
  },"87": {
    "doc": "Backends",
    "title": "Recommendations",
    "content": ". | Most users: Start with Phaxio Setup - it’s the easiest and most reliable | High volume: Consider SIP/Asterisk Setup for cost savings | Existing Sinch users: Use Sinch Setup if you already have an account | . All backends support the same API endpoints and features. You can switch between them by changing your configuration. ",
    "url": "/Faxbot/backends/#recommendations",
    
    "relUrl": "/backends/#recommendations"
  },"88": {
    "doc": "Backends",
    "title": "Backends",
    "content": ". ",
    "url": "/Faxbot/backends/",
    
    "relUrl": "/backends/"
  },"89": {
    "doc": "AI Integration",
    "title": "AI Assistant Integration",
    "content": "Faxbot integrates with AI assistants through the Model Context Protocol (MCP), allowing you to send faxes using natural language commands like “fax this document to my doctor.” . ",
    "url": "/Faxbot/ai-integration/#ai-assistant-integration",
    
    "relUrl": "/ai-integration/#ai-assistant-integration"
  },"90": {
    "doc": "AI Integration",
    "title": "Transports — Quick Start",
    "content": "Pick one transport based on your environment. All require the Faxbot API to be running (default http://localhost:8080) and an API key if enabled. 1) stdio (desktop assistants) . cd node_mcp FAX_API_URL=http://localhost:8080 API_KEY=$API_KEY node src/servers/stdio.js . Use filePath in tools to send local PDFs/TXTs without base64. 2) HTTP (web/cloud) . cd node_mcp MCP_HTTP_PORT=3001 FAX_API_URL=http://localhost:8080 API_KEY=$API_KEY node src/servers/http.js . Send X-API-Key on requests. Restrict MCP_HTTP_CORS_ORIGIN in production. 3) SSE (enterprise) . cd node_mcp MCP_SSE_PORT=3002 OAUTH_ISSUER=... OAUTH_AUDIENCE=faxbot-mcp OAUTH_JWKS_URL=... \\ FAX_API_URL=http://localhost:8080 API_KEY=$API_KEY node src/servers/sse.js . Protect with OAuth2/JWT (required for HIPAA scenarios). 4) WebSocket (realtime) . cd node_mcp MCP_WS_PORT=3004 API_KEY=$API_KEY node src/servers/ws.js . Connect to ws://localhost:3004 (optionally add ?key=$API_KEY). ",
    "url": "/Faxbot/ai-integration/#transports--quick-start",
    
    "relUrl": "/ai-integration/#transports--quick-start"
  },"91": {
    "doc": "AI Integration",
    "title": "What is MCP?",
    "content": "MCP (Model Context Protocol) is a standard for connecting AI assistants to external tools and data sources. Faxbot provides MCP servers that expose fax-sending capabilities to AI assistants. ",
    "url": "/Faxbot/ai-integration/#what-is-mcp",
    
    "relUrl": "/ai-integration/#what-is-mcp"
  },"92": {
    "doc": "AI Integration",
    "title": "Available Integrations",
    "content": ". | Claude Desktop: Use stdio transport for local desktop integration | Cursor: Built-in MCP support with stdio transport | Web Applications: HTTP transport for cloud-based AI assistants | Enterprise: SSE + OAuth2 transport for secure, authenticated access | . ",
    "url": "/Faxbot/ai-integration/#available-integrations",
    
    "relUrl": "/ai-integration/#available-integrations"
  },"93": {
    "doc": "AI Integration",
    "title": "Transport Options",
    "content": "| Transport | Best For | Authentication | Complexity | . | stdio | Desktop AI (Claude, Cursor) | API key | Low | . | HTTP | Web apps, cloud AI | API key | Medium | . | SSE+OAuth | Enterprise, HIPAA environments | JWT/OAuth2 | High | . ",
    "url": "/Faxbot/ai-integration/#transport-options",
    
    "relUrl": "/ai-integration/#transport-options"
  },"94": {
    "doc": "AI Integration",
    "title": "Language Options",
    "content": "Faxbot provides MCP servers in both Node.js and Python with identical functionality. Choose based on your environment preferences. ",
    "url": "/Faxbot/ai-integration/#language-options",
    
    "relUrl": "/ai-integration/#language-options"
  },"95": {
    "doc": "AI Integration",
    "title": "AI Integration",
    "content": ". ",
    "url": "/Faxbot/ai-integration/",
    
    "relUrl": "/ai-integration/"
  },"96": {
    "doc": "SDKs",
    "title": "SDKs",
    "content": "Official SDKs with identical APIs and error mapping. | Version: 1.0.2 (synchronized) | File types: PDF and TXT | Errors: 400/401/404/413/415 consistent with REST API | . Choose a language: . | Node.js | Python | . ",
    "url": "/Faxbot/sdks/",
    
    "relUrl": "/sdks/"
  },"97": {
    "doc": "Guides",
    "title": "Guides",
    "content": "Task‑oriented, GUI‑first walkthroughs for common jobs. | Send Your First Fax (5‑Minute Phaxio) | SIP/Asterisk Cutover Checklist | Secure MCP SSE with OAuth2 | API Keys and Smoke Test | Create a Public URL (Tunnels) | . ",
    "url": "/Faxbot/guides/",
    
    "relUrl": "/guides/"
  },"98": {
    "doc": "Go‑Live Checklists",
    "title": "Go‑Live Checklists",
    "content": "Final readiness checklists for each backend profile. | Phaxio | Sinch | SIP/Asterisk | . Print‑ready one‑pagers . | Phaxio — One‑Pager | Sinch — One‑Pager | SIP/Asterisk — One‑Pager | . ",
    "url": "/Faxbot/go-live/",
    
    "relUrl": "/go-live/"
  },"99": {
    "doc": "MCP Integration",
    "title": "MCP Integration",
    "content": "Faxbot provides MCP servers in Node and Python with identical tools: . | Tools: send_fax, get_fax_status | Transports: . | stdio (local desktop assistants) | HTTP (Node streamable HTTP) | SSE + OAuth2 (Node and Python) | . | . Choose a server: . | Python MCP | Node MCP | Transports | . Limits and file handling . | stdio: use filePath to avoid base64 limits | HTTP/SSE: JSON limit is ~16 MB for Node; REST API raw file limit is 10 MB | Allowed types: PDF, TXT | . ",
    "url": "/Faxbot/mcp/",
    
    "relUrl": "/mcp/"
  },"100": {
    "doc": "Legal",
    "title": "Legal Playbook",
    "content": "Goal . | Send filings/contracts securely and reliably. | . Setup . | Backend: Phaxio or Sinch (cloud) | Security: require API key; use HTTPS; enable audit logging if policy requires | . Workflow . | Send via Admin Console → Send; track via Jobs | Prefer PDFs; ensure readable resolution and file size under 10 MB | . Reliability . | Keep Diagnostics green: HTTPS, callback reachability, API key enabled | . Escalation . | If repeated failures occur, switch to an alternate backend or retry later; check provider status pages | . ",
    "url": "/Faxbot/playbooks/legal/#legal-playbook",
    
    "relUrl": "/playbooks/legal/#legal-playbook"
  },"101": {
    "doc": "Legal",
    "title": "Legal",
    "content": " ",
    "url": "/Faxbot/playbooks/legal/",
    
    "relUrl": "/playbooks/legal/"
  },"102": {
    "doc": "MCP Integration",
    "title": "MCP Integration",
    "content": "Demo . Watch the demo video (Your browser or GitHub may not inline-play videos; use the link.) What MCP is . | MCP is a protocol. Today, stdio, HTTP, and SSE are the canonical transports. A WebSocket transport for MCP is under discussion (SEP‑1288). Faxbot provides a Node WebSocket helper for convenience; it mirrors tool calls but is not a formal MCP WebSocket transport. | . Quick Start (Claude/Cursor) . | Add Faxbot MCP to your assistant config (stdio). Then call send_fax with a local filePath. | . Claude Desktop or Cursor config example: . { \"mcpServers\": { \"faxbot\": { \"command\": \"node\", \"args\": [\"src/servers/stdio.js\"], \"cwd\": \"/PATH/TO/faxbot/node_mcp\", \"env\": { \"FAX_API_URL\": \"http://localhost:8080\", \"API_KEY\": \"your_api_key\" } } } } . Use these tools (Node &amp; Python MCP) . | send_fax: { to, filePath } (stdio) or { to, fileUrl } or { to, fileContent, fileName, fileType } | get_fax_status: { jobId } | get_fax: { id } — works for outbound job ids and inbound ids | list_inbound: { limit?, cursor? } — recent inbound metadata | get_inbound_pdf: { inboundId, asBase64? } — returns base64 or a path/URI to fetch | . Important notes . | File types: only PDF and TXT. Convert images (PNG/JPG) to PDF first. | Stdio: use filePath so the MCP reads the file locally and posts it to Faxbot. | HTTP/SSE: provide base64 content; MCP JSON limit is ~16 MB; REST API raw limit is 10 MB. | Backends: works with any Faxbot backend (phaxio, sinch, or sip). | . Examples . | Natural language: “Fax insurance_card.pdf to SkyRidge Cardiology.” The MCP client can look up the number using its own tools, then call send_fax. Follow with get_fax_status. | Tool calls: . | send_fax with { to: \"+15551234567\", filePath: \"/Users/me/Documents/letter.pdf\" } | get_fax_status with { jobId: \"&lt;id&gt;\" } | get_fax with { id: \"in_123\" } (inbound) or { id: \"fbj_ABC\" } (outbound) | get_inbound_pdf with { inboundId: \"in_123\", asBase64: true } | . | . Docker Quick Start (HTTP MCP) . | Start the API and MCP via Docker Compose: docker compose up -d --build api docker compose --profile mcp up -d --build faxbot-mcp . | The MCP HTTP server listens on http://localhost:3001. | Use this when integrating web clients or cloud AI that speak MCP over HTTP. | For Claude Desktop or Cursor (stdio), run the MCP directly on the host instead of Docker. | . Turnkey SSE (HIPAA‑oriented) via Docker Compose . | Node SSE (port 3002): export OAUTH_ISSUER=https://YOUR_ISSUER export OAUTH_AUDIENCE=faxbot-mcp export OAUTH_JWKS_URL=https://YOUR_ISSUER/.well-known/jwks.json docker compose --profile mcp up -d --build faxbot-mcp-sse . | Python SSE (port 3003): export OAUTH_ISSUER=https://YOUR_ISSUER export OAUTH_AUDIENCE=faxbot-mcp export OAUTH_JWKS_URL=https://YOUR_ISSUER/.well-known/jwks.json docker compose --profile mcp up -d --build faxbot-mcp-py-sse . | Choose one. Both require Bearer JWTs issued by your IdP; tokens are verified via JWKS. | Detailed OIDC setup guidance and provider links: see OAUTH_SETUP.md. | . MCP Inspector (explore tools/resources/prompts) . | Start the Inspector UI via Docker: docker compose --profile mcp up -d mcp-inspector open http://localhost:6274 . | Or run locally: npx @modelcontextprotocol/inspector . | Connect the Inspector to your Faxbot MCP server: . | Stdio: launch node node_mcp/src/servers/stdio.js (or python python_mcp/stdio_server.py) with FAX_API_URL and API_KEY env. | HTTP: set transport “streamable-http” and point to http://localhost:3001. | SSE: set transport “sse” and point to http://localhost:3002/sse (Node) or http://localhost:3003/sse (Python). Include Authorization: Bearer &lt;JWT&gt;. | WebSocket (Node, helper): connect to ws://localhost:3004 (optionally add ?key=&lt;API_KEY&gt;). This helper mirrors tool calls and is not a formal MCP transport. | . | . Example mcp.json for MCP Inspector . { \"mcpServers\": { \"faxbot-node-stdio\": { \"type\": \"stdio\", \"command\": \"node\", \"args\": [\"src/servers/stdio.js\"], \"cwd\": \"./node_mcp\", \"env\": { \"FAX_API_URL\": \"http://localhost:8080\", \"API_KEY\": \"your_api_key\" } }, \"faxbot-node-http\": { \"type\": \"streamable-http\", \"url\": \"http://localhost:3001/mcp\" }, \"faxbot-node-sse\": { \"type\": \"sse\", \"url\": \"http://localhost:3002/sse\" }, \"faxbot-py-stdio\": { \"type\": \"stdio\", \"command\": \"python\", \"args\": [\"stdio_server.py\"], \"cwd\": \"./python_mcp\", \"env\": { \"FAX_API_URL\": \"http://localhost:8080\", \"API_KEY\": \"your_api_key\" } }, \"faxbot-py-sse\": { \"type\": \"sse\", \"url\": \"http://localhost:3003/sse\" } } } . Notes: . | For SSE entries, provide Authorization: Bearer &lt;JWT&gt; in the Inspector UI headers before connecting. | If you keep only one server entry or name one default-server, Inspector selects it automatically. | . Transports × servers (language matrix) . 2 languages × 3 transports = 6 options. Node MCP: . | stdio: node_mcp/src/servers/stdio.js | HTTP: node_mcp/src/servers/http.js (port 3001) | SSE+OAuth: node_mcp/src/servers/sse.js (port 3002) | WebSocket: node_mcp/src/servers/ws.js (port 3004) | . Python MCP: . | stdio: python_mcp/stdio_server.py | HTTP: python_mcp/http_server.py | SSE+OAuth: python_mcp/server.py | . Node MCP start commands . cd node_mcp &amp;&amp; npm install FAX_API_URL=http://localhost:8080 API_KEY=$API_KEY ./scripts/start-stdio.sh # stdio FAX_API_URL=http://localhost:8080 API_KEY=$API_KEY MCP_HTTP_PORT=3001 ./scripts/start-http.sh OAUTH_ISSUER=... OAUTH_AUDIENCE=... FAX_API_URL=http://localhost:8080 API_KEY=$API_KEY \\ MCP_SSE_PORT=3002 ./scripts/start-sse.sh MCP_WS_PORT=3004 API_KEY=$API_KEY node src/servers/ws.js # WebSocket . Python MCP start commands . cd python_mcp python -m venv .venv &amp;&amp; source .venv/bin/activate pip install -r requirements.txt export FAX_API_URL=http://localhost:8080 export API_KEY=your_api_key python stdio_server.py # stdio # or: uvicorn http_server:app --host 0.0.0.0 --port 3004 # or: uvicorn server:app --host 0.0.0.0 --port 3003 (SSE+OAuth) . HTTP and SSE details . | HTTP uses Streamable HTTP with sessions: POST /mcp, GET /mcp (SSE), DELETE /mcp. | SSE+OAuth requires Bearer JWT with iss/aud; JWKS is fetched from the issuer. | Place HTTP/SSE behind auth/rate limits for production. | . Voice examples . | ❌ “Fax document.pdf to +1234567890” (missing file access/base64) | ✅ “Call send_fax with { to: “+1234567890”, filePath: “/path/to/file.pdf” }” | For HTTP/SSE, read and base64‑encode the file before calling send_fax. | . File conversion hints . | macOS Preview: File → Export As… → PDF | macOS CLI: sips -s format pdf \"in.png\" --out \"out.pdf\" | Linux: img2pdf in.png -o out.pdf or magick convert in.png out.pdf | Windows: “Print to PDF”. | . See also: Images vs Text PDFs guide (docs/IMAGES_AND_PDFS.md). ",
    "url": "/Faxbot/ai-integration/mcp-integration.html",
    
    "relUrl": "/ai-integration/mcp-integration.html"
  },"103": {
    "doc": "Network & Transports",
    "title": "Network &amp; Transports",
    "content": "Guidance for securing MCP transports and webhooks when running Faxbot in production. ",
    "url": "/Faxbot/security/network.html#network--transports",
    
    "relUrl": "/security/network.html#network--transports"
  },"104": {
    "doc": "Network & Transports",
    "title": "MCP Transports",
    "content": ". | HTTP (Node MCP) . | Port: 3001 (default) | Protect with MCP_HTTP_API_KEY; set strict MCP_HTTP_CORS_ORIGIN (no * when credentials). | Run behind TLS via reverse proxy; add IP allowlists and rate limits where appropriate. | . | SSE (Node/Python MCP) . | Ports: 3002 (Node), 3003 (Python) | Require OAuth2/JWT in production. Configure OAUTH_ISSUER, OAUTH_AUDIENCE, and (optionally) OAUTH_JWKS_URL. | Run behind TLS; validate tokens against your IdP; set short TTLs. | . | WebSocket (Node MCP) . | Port: 3004 (default) | Protect with MCP_WS_API_KEY (or reuse API_KEY) and run behind TLS or an authenticated proxy. | Use only for trusted clients or internal networks. | . | . ",
    "url": "/Faxbot/security/network.html#mcp-transports",
    
    "relUrl": "/security/network.html#mcp-transports"
  },"105": {
    "doc": "Network & Transports",
    "title": "Webhooks &amp; Callbacks",
    "content": ". | Phaxio (outbound status) . | Endpoint: POST /phaxio-callback | Signature: X-Phaxio-Signature (HMAC-SHA256 of raw body using PHAXIO_API_SECRET) | Always use HTTPS public URLs; avoid exposing staging/test endpoints publicly. | . | Phaxio (inbound) . | Endpoint: POST /phaxio-inbound | Signature: X-Phaxio-Signature (HMAC-SHA256) | . | Sinch (inbound) . | Endpoint: POST /sinch-inbound | Basic auth: SINCH_INBOUND_BASIC_USER/PASS | HMAC: X-Sinch-Signature with SINCH_INBOUND_HMAC_SECRET | . | SIP/Asterisk (inbound) . | Endpoint: POST /_internal/asterisk/inbound | Header: X-Internal-Secret: &lt;ASTERISK_INBOUND_SECRET&gt; | Only accessible over private networks; do not expose publicly. | . | . ",
    "url": "/Faxbot/security/network.html#webhooks--callbacks",
    
    "relUrl": "/security/network.html#webhooks--callbacks"
  },"106": {
    "doc": "Network & Transports",
    "title": "Reverse Proxy Recommendations",
    "content": ". | Enforce TLS; redirect HTTP→HTTPS. | Set security headers (HSTS, CSP, X-Content-Type-Options, Referrer-Policy, X-Frame-Options, Permissions-Policy). | Limit request sizes; apply rate limits and IP restrictions as needed. | Do not log PHI; log IDs and generic metadata only. | . ",
    "url": "/Faxbot/security/network.html#reverse-proxy-recommendations",
    
    "relUrl": "/security/network.html#reverse-proxy-recommendations"
  },"107": {
    "doc": "Network & Transports",
    "title": "Network & Transports",
    "content": " ",
    "url": "/Faxbot/security/network.html",
    
    "relUrl": "/security/network.html"
  },"108": {
    "doc": "Node MCP",
    "title": "Faxbot Node MCP",
    "content": "Node-based MCP servers for Faxbot. Features: . | Stdio, Streamable HTTP, SSE+OAuth, and WebSocket transports | Tools: send_fax, get_fax_status | . ",
    "url": "/Faxbot/ai-integration/node-mcp.html#faxbot-node-mcp",
    
    "relUrl": "/ai-integration/node-mcp.html#faxbot-node-mcp"
  },"109": {
    "doc": "Node MCP",
    "title": "Install",
    "content": "From repo root: . cd node_mcp npm install . Environment variables: . | FAX_API_URL (default http://localhost:8080) | API_KEY (Faxbot API key) | SSE only: OAUTH_ISSUER, OAUTH_AUDIENCE, optional OAUTH_JWKS_URL | . ",
    "url": "/Faxbot/ai-integration/node-mcp.html#install",
    
    "relUrl": "/ai-integration/node-mcp.html#install"
  },"110": {
    "doc": "Node MCP",
    "title": "Run",
    "content": "# Stdio ./scripts/start-stdio.sh # HTTP (Streamable) ./scripts/start-http.sh # SSE + OAuth ./scripts/start-sse.sh # WebSocket MCP_WS_PORT=3004 node src/servers/ws.js . ",
    "url": "/Faxbot/ai-integration/node-mcp.html#run",
    
    "relUrl": "/ai-integration/node-mcp.html#run"
  },"111": {
    "doc": "Node MCP",
    "title": "Tools",
    "content": ". | send_fax(to, filePath?, fileContent?, fileName?, fileType?) | get_fax_status(jobId) | . ",
    "url": "/Faxbot/ai-integration/node-mcp.html#tools",
    
    "relUrl": "/ai-integration/node-mcp.html#tools"
  },"112": {
    "doc": "Node MCP",
    "title": "Notes",
    "content": ". | For local files, tools accept a filePath parameter (preferred). Base64 is still supported for compatibility. | . ",
    "url": "/Faxbot/ai-integration/node-mcp.html#notes",
    
    "relUrl": "/ai-integration/node-mcp.html#notes"
  },"113": {
    "doc": "Node MCP",
    "title": "Notes",
    "content": ". | For desktop assistants, prefer stdio + filePath to avoid base64/token overhead. | Legacy MCP servers under api/ have been removed. Use node_mcp or python_mcp only. | . ",
    "url": "/Faxbot/ai-integration/node-mcp.html#notes-1",
    
    "relUrl": "/ai-integration/node-mcp.html#notes-1"
  },"114": {
    "doc": "Node MCP",
    "title": "Node MCP",
    "content": " ",
    "url": "/Faxbot/ai-integration/node-mcp.html",
    
    "relUrl": "/ai-integration/node-mcp.html"
  },"115": {
    "doc": "Node.js SDK",
    "title": "Faxbot Node.js SDK",
    "content": "Thin Node.js client for the Faxbot API. Sends faxes and checks status via the unified Faxbot REST API (independent of the server’s backend: Phaxio or SIP/Asterisk). | Package name: faxbot | Requires: Node.js 18+ | . ",
    "url": "/Faxbot/development/node-sdk.html#faxbot-nodejs-sdk",
    
    "relUrl": "/development/node-sdk.html#faxbot-nodejs-sdk"
  },"116": {
    "doc": "Node.js SDK",
    "title": "Install",
    "content": ". | From npm (once published): npm install faxbot . | From source (this repo): cd sdks/node npm install . | . ",
    "url": "/Faxbot/development/node-sdk.html#install",
    
    "relUrl": "/development/node-sdk.html#install"
  },"117": {
    "doc": "Node.js SDK",
    "title": "Usage",
    "content": "const FaxbotClient = require('faxbot'); const client = new FaxbotClient('http://localhost:8080', 'YOUR_API_KEY'); async function run() { const job = await client.sendFax('+15551234567', '/path/to/document.pdf'); console.log('Queued job:', job.id, job.status); const status = await client.getStatus(job.id); console.log('Status:', status.status); } run().catch(console.error); . ",
    "url": "/Faxbot/development/node-sdk.html#usage",
    
    "relUrl": "/development/node-sdk.html#usage"
  },"118": {
    "doc": "Node.js SDK",
    "title": "Notes",
    "content": ". | Only .pdf and .txt files are accepted. | If the server requires an API key, it must be supplied via X-API-Key (handled automatically when apiKey is provided). | Optional helper: checkHealth() pings /health. | . ",
    "url": "/Faxbot/development/node-sdk.html#notes",
    
    "relUrl": "/development/node-sdk.html#notes"
  },"119": {
    "doc": "Node.js SDK",
    "title": "Publishing (maintainers)",
    "content": ". | Configure GitHub secret NPM_TOKEN. | Create a GitHub Release to trigger publish via CI. | . ",
    "url": "/Faxbot/development/node-sdk.html#publishing-maintainers",
    
    "relUrl": "/development/node-sdk.html#publishing-maintainers"
  },"120": {
    "doc": "Node.js SDK",
    "title": "MCP Note",
    "content": ". | MCP (Model Context Protocol) is not part of this SDK. It is a separate integration layer for AI assistants. | Refer to docs/MCP_INTEGRATION.md in the repository for MCP setup and usage. | . ",
    "url": "/Faxbot/development/node-sdk.html#mcp-note",
    
    "relUrl": "/development/node-sdk.html#mcp-note"
  },"121": {
    "doc": "Node.js SDK",
    "title": "Node.js SDK",
    "content": " ",
    "url": "/Faxbot/development/node-sdk.html",
    
    "relUrl": "/development/node-sdk.html"
  },"122": {
    "doc": "Node MCP",
    "title": "Node MCP",
    "content": "Stdio server . | Path: node_mcp/src/servers/stdio.js | Start: node node_mcp/src/servers/stdio.js | . HTTP (streamable) . | Path: node_mcp/src/servers/http.js | Env: MCP_HTTP_PORT (default 3001) | Start: node node_mcp/src/servers/http.js | Endpoints: POST /mcp, GET /mcp, DELETE /mcp, GET /health | . SSE (OAuth2) . | Path: node_mcp/src/servers/sse.js | Env: OAUTH_ISSUER, OAUTH_AUDIENCE, optional OAUTH_JWKS_URL, MCP_SSE_PORT | Start: node node_mcp/src/servers/sse.js | Endpoints: GET /sse, POST /messages, DELETE /messages, GET /health | . Tools . | send_fax(to, filePath | fileContent+fileName[, fileType]) | get_fax_status(jobId) | . ",
    "url": "/Faxbot/mcp/node/",
    
    "relUrl": "/mcp/node/"
  },"123": {
    "doc": "Node.js SDK",
    "title": "Node.js SDK",
    "content": "Install . | Local project includes the SDK in sdks/node/. For package usage, require the client class directly. | . Usage . const FaxbotClient = require('faxbot'); const client = new FaxbotClient('http://localhost:8080', 'your_api_key'); // Send a fax const job = await client.sendFax('+15551234567', '/path/to/document.pdf'); // Later const status = await client.getStatus(job.id); . Errors . | 400: invalid phone or params | 401: missing/invalid API key | 404: job or endpoint not found | 413: file too large | 415: unsupported type | . Health check . const ok = await client.checkHealth(); . ",
    "url": "/Faxbot/sdks/node/",
    
    "relUrl": "/sdks/node/"
  },"124": {
    "doc": "Secure MCP SSE with OAuth2",
    "title": "Secure MCP SSE with OAuth2",
    "content": "Node SSE . | Set OAUTH_ISSUER, OAUTH_AUDIENCE, optional OAUTH_JWKS_URL | Start: node node_mcp/src/servers/sse.js | Health: GET /health | . Python SSE . | Same env; start with uvicorn python_mcp/server:app --port 3003 | . Assistant config . | Provide the SSE URL, include Bearer token on requests | Keep tokens short‑lived and scoped | . Security checklist . | TLS termination in front of the server | Validate issuer and audience | Prefer private networks and least privilege | . Links . | MCP overview | Security: OAuth/OIDC | . ",
    "url": "/Faxbot/guides/oauth-mcp-setup/",
    
    "relUrl": "/guides/oauth-mcp-setup/"
  },"125": {
    "doc": "OAuth Setup",
    "title": "OAuth2 / OIDC Setup for Faxbot MCP (SSE)",
    "content": "This guide shows how to configure JWT validation for the SSE transport. It covers the minimal concepts, the three env vars Faxbot needs, and quick links for popular identity providers. ",
    "url": "/Faxbot/security/oauth-setup.html#oauth2--oidc-setup-for-faxbot-mcp-sse",
    
    "relUrl": "/security/oauth-setup.html#oauth2--oidc-setup-for-faxbot-mcp-sse"
  },"126": {
    "doc": "OAuth Setup",
    "title": "Environment variables",
    "content": "What the MCP SSE server validates . | Issuer (iss): matches OAUTH_ISSUER | Audience (aud): matches OAUTH_AUDIENCE (e.g., faxbot-mcp) | Signature: verified against the provider’s JWKS (OAUTH_JWKS_URL) | Expiry / not-before: standard JWT time checks | . Environment variables . OAUTH_ISSUER # Your OIDC issuer URL (no trailing slash) OAUTH_AUDIENCE # The audience/identifier of the API you expose to clients (string) OAUTH_JWKS_URL # JWKS endpoint (optional if your issuer uses the default well-known path) . General steps (any provider) 1) Create or identify an API/resource in your IdP. | Set an identifier value (this becomes the aud claim). Example: faxbot-mcp. 2) Create a client/app that can obtain access tokens for that API (client credentials or the flow used by your client). 3) Find your issuer URL and JWKS URL. | The issuer is the base of your OIDC realm/tenant. | The JWKS URL is advertised as jwks_uri in the OIDC discovery document at ${issuer}/.well-known/openid-configuration. 4) Export env vars and start the SSE server (Node or Python). 5) Obtain a token from the IdP and connect to /sse with Authorization: Bearer &lt;token&gt;. | . Provider specifics and links . Auth0 . | Issuer: https://YOUR_TENANT.auth0.com | Audience: your API Identifier (e.g., faxbot-mcp) | JWKS: https://YOUR_TENANT.auth0.com/.well-known/jwks.json | Docs: . | Create API (audience): https://auth0.com/docs/get-started/apis | JWKS and token validation: https://auth0.com/docs/secure/tokens/json-web-tokens/json-web-key-sets | Client credentials flow: https://auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow | . | . Okta . | Issuer: https://YOUR_DOMAIN.okta.com/oauth2/default (or your custom auth server) | Audience: the custom API audience you configure | JWKS: ${issuer}/v1/keys (Okta uses /v1/keys, not the generic /.well-known/jwks.json) | Docs: . | Authorization servers &amp; discovery: https://developer.okta.com/docs/guides/customize-authz-server/main/ | Validate access tokens / JWKS: https://developer.okta.com/docs/guides/validate-access-tokens/main/ | . | . Microsoft Entra ID (Azure AD) . | Issuer: https://login.microsoftonline.com/&lt;TENANT_ID&gt;/v2.0 | Audience: App Registration → “Expose an API” → Application ID URI (or custom ID you set) | JWKS: https://login.microsoftonline.com/&lt;TENANT_ID&gt;/discovery/v2.0/keys | Docs: . | OIDC discovery: https://learn.microsoft.com/azure/active-directory/develop/v2-protocols-oidc | App registration / Expose an API: https://learn.microsoft.com/azure/active-directory/develop/quickstart-configure-app-expose-web-apis | . | . Google Identity (Workforce/Cloud) . | Issuer: https://accounts.google.com | Audience: your audience string; ensure your token provider includes it in aud | JWKS: https://www.googleapis.com/oauth2/v3/certs | Docs: . | OIDC discovery: https://accounts.google.com/.well-known/openid-configuration | . | . Keycloak (self‑hosted) . | Issuer: https://YOUR_HOST/realms/YOUR_REALM | Audience: client ID or custom audience claim (depends on realm configuration) | JWKS: ${issuer}/protocol/openid-connect/certs | Docs: . | OpenID Connect endpoints: https://www.keycloak.org/docs/latest/server_admin/#_endpoints | . | . How to test quickly (Auth0 example) . # 1) Request a token using client credentials export AUTH0_DOMAIN=YOUR_TENANT.auth0.com export AUTH0_CLIENT_ID=... export AUTH0_CLIENT_SECRET=... export AUDIENCE=faxbot-mcp TOKEN=$(curl -s https://$AUTH0_DOMAIN/oauth/token \\ -H 'content-type: application/json' \\ -d '{\"grant_type\":\"client_credentials\",\"client_id\":\"'\"$AUTH0_CLIENT_ID\"'\",\"client_secret\":\"'\"$AUTH0_CLIENT_SECRET\"'\",\"audience\":\"'\"$AUDIENCE\"'\"}' | jq -r .access_token) # 2) Connect to SSE (replace 3002 or 3003 depending on Node/Python container) curl -H \"Authorization: Bearer $TOKEN\" -H \"Accept: text/event-stream\" http://localhost:3002/sse . Notes . | You may set OAUTH_JWKS_URL explicitly if your provider’s JWKS path differs from the default (e.g., Okta’s /v1/keys, Keycloak’s /protocol/openid-connect/certs). | The SSE servers do not mint tokens; they only validate them. Use your IdP or an internal OAuth server to issue client tokens. | For HIPAA deployments, ensure your IdP and reverse proxy enforce TLS, MFA, and appropriate policies. | . ",
    "url": "/Faxbot/security/oauth-setup.html#environment-variables",
    
    "relUrl": "/security/oauth-setup.html#environment-variables"
  },"127": {
    "doc": "OAuth Setup",
    "title": "OAuth Setup",
    "content": " ",
    "url": "/Faxbot/security/oauth-setup.html",
    
    "relUrl": "/security/oauth-setup.html"
  },"128": {
    "doc": "Send Your First Fax (5‑Minute Phaxio)",
    "title": "Send Your First Fax (5‑Minute Phaxio)",
    "content": "Who is this for . | Operators and non‑technical users who want a quick, reliable send. | . What you’ll do . | Configure Phaxio in the Admin Console, verify a public URL, and send a test fax. | . Steps 1) Open Admin Console → Setup Wizard . | Choose Backend: Phaxio (Recommended) | Enter API Key and Secret (from Phaxio console) | Set Callback URL to &lt;PUBLIC_API_URL&gt;/phaxio-callback | Pick Security Profile: HIPAA if handling PHI, else Non‑PHI | Click “Apply &amp; Reload” 2) Public URL (if needed) | Use a tunnel during testing: Create a Public URL | Ensure PUBLIC_API_URL in Settings matches the tunnel URL (https) 3) Send a test fax | In Admin Console → Send, choose a PDF or TXT and enter a destination | Or via SDK: Node, Python 4) Check status | Admin Console → Jobs shows queued/in‑progress/complete | API: GET /fax/{id} | . Tips . | Allowed file types: PDF and TXT | Max size: see MAX_FILE_SIZE_MB (default 10 MB) | Enforce HTTPS and signature verification for production | . Troubleshooting . | No status updates? Verify callback URL and PUBLIC_API_URL reachability | “Invalid token” when provider fetches PDF: the per‑job token expired or was mismatched | See Troubleshooting | . ",
    "url": "/Faxbot/guides/phaxio-5-minutes/",
    
    "relUrl": "/guides/phaxio-5-minutes/"
  },"129": {
    "doc": "Phaxio E2E Test",
    "title": "Phaxio End-to-End Test (No Physical Fax Required)",
    "content": "Goal: Send a real fax through Phaxio and receive it on a Phaxio number — fully end-to-end, no hardware. ",
    "url": "/Faxbot/development/phaxio-e2e-test.html#phaxio-end-to-end-test-no-physical-fax-required",
    
    "relUrl": "/development/phaxio-e2e-test.html#phaxio-end-to-end-test-no-physical-fax-required"
  },"130": {
    "doc": "Phaxio E2E Test",
    "title": "Prerequisites",
    "content": ". | Phaxio account with API key/secret | A Phaxio receiving number (purchase a temporary number in the Phaxio console) | An HTTPS URL that Phaxio can reach (for fetching your PDF and posting callbacks) | . ",
    "url": "/Faxbot/development/phaxio-e2e-test.html#prerequisites",
    
    "relUrl": "/development/phaxio-e2e-test.html#prerequisites"
  },"131": {
    "doc": "Phaxio E2E Test",
    "title": "1) Configure Faxbot for Phaxio",
    "content": "Set the following in .env at the repo root: . FAX_BACKEND=phaxio API_KEY=&lt;a_secure_key_you_choose&gt; PHAXIO_API_KEY=&lt;from_phaxio_console&gt; PHAXIO_API_SECRET=&lt;from_phaxio_console&gt; # Point these to your public HTTPS URL (set in step 2) PUBLIC_API_URL=https://&lt;your-public-host&gt; PHAXIO_CALLBACK_URL=https://&lt;your-public-host&gt;/phaxio-callback . Then start the API (cloud-only): . make up-cloud . ",
    "url": "/Faxbot/development/phaxio-e2e-test.html#1-configure-faxbot-for-phaxio",
    
    "relUrl": "/development/phaxio-e2e-test.html#1-configure-faxbot-for-phaxio"
  },"132": {
    "doc": "Phaxio E2E Test",
    "title": "2) Expose the API via HTTPS",
    "content": "Fast path (auto): ./scripts/setup-phaxio-tunnel.sh . This will: . | Start a quick tunnel (prefers cloudflared; falls back to ngrok) | Detect the public HTTPS URL | Update .env (PUBLIC_API_URL, PHAXIO_CALLBACK_URL, FAX_BACKEND=phaxio) | Restart the API (make up-cloud) | . Manual alternative: . | Cloudflared: cloudflared tunnel --url http://localhost:8080 | ngrok: ngrok http 8080 Then copy the HTTPS URL and set PUBLIC_API_URL and PHAXIO_CALLBACK_URL in .env, and restart the API (make down &amp;&amp; make up-cloud). | . ",
    "url": "/Faxbot/development/phaxio-e2e-test.html#2-expose-the-api-via-https",
    
    "relUrl": "/development/phaxio-e2e-test.html#2-expose-the-api-via-https"
  },"133": {
    "doc": "Phaxio E2E Test",
    "title": "3) Send a fax to your Phaxio number",
    "content": "Use a simple text file (Faxbot will render it to PDF for you): . echo \"Test Faxbot → Phaxio end-to-end\" &gt; /tmp/fax.txt FAX_API_URL=http://localhost:8080 API_KEY=$API_KEY \\ ./scripts/send-fax.sh +1YOURPHAXIONUMBER /tmp/fax.txt . Sample PDF works too: ./scripts/send-fax.sh +1YOURPHAXIONUMBER path/to/sample.pdf . The command prints a JSON response with id. Use it to poll status: ./scripts/get-status.sh &lt;job_id&gt; . ",
    "url": "/Faxbot/development/phaxio-e2e-test.html#3-send-a-fax-to-your-phaxio-number",
    
    "relUrl": "/development/phaxio-e2e-test.html#3-send-a-fax-to-your-phaxio-number"
  },"134": {
    "doc": "Phaxio E2E Test",
    "title": "4) Verify Delivery",
    "content": ". | Phaxio dashboard (Inbound faxes) should show a received fax. | Your callback endpoint (/phaxio-callback) updates the job status to SUCCESS/FAILED. | make logs tails API logs; you should see pdf_served and job_updated events. | . ",
    "url": "/Faxbot/development/phaxio-e2e-test.html#4-verify-delivery",
    
    "relUrl": "/development/phaxio-e2e-test.html#4-verify-delivery"
  },"135": {
    "doc": "Phaxio E2E Test",
    "title": "Notes",
    "content": ". | Production: Use HTTPS for PUBLIC_API_URL. Phaxio will fetch your PDF over TLS. | Security: API_KEY protects your /fax endpoint; scripts forward it as X-API-Key. | Retry: Phaxio sends webhooks; transient network issues are retried internally. | . ",
    "url": "/Faxbot/development/phaxio-e2e-test.html#notes",
    
    "relUrl": "/development/phaxio-e2e-test.html#notes"
  },"136": {
    "doc": "Phaxio E2E Test",
    "title": "Phaxio E2E Test",
    "content": " ",
    "url": "/Faxbot/development/phaxio-e2e-test.html",
    
    "relUrl": "/development/phaxio-e2e-test.html"
  },"137": {
    "doc": "Phaxio — One‑Pager (Print)",
    "title": "Phaxio Go‑Live — One‑Pager",
    "content": "Organization: ___ Environment: Dev / Staging / Prod Date: _______ . Contacts . | Owner: _____ On‑call: _____ Provider Account: _______ | . Accounts &amp; Legal . | Phaxio account active (console access verified) | BAA executed (if handling PHI) | Provider document storage disabled (HIPAA) | . Faxbot Configuration . | FAX_BACKEND=phaxio | PHAXIO_API_KEY and PHAXIO_API_SECRET set | PUBLIC_API_URL uses HTTPS (resolves publicly) | Callback URL set to &lt;PUBLIC_API_URL&gt;/phaxio-callback | Signature verification enabled: PHAXIO_VERIFY_SIGNATURE=true (HIPAA) | API_KEY set; clients send X-API-Key | . Security . | ENFORCE_PUBLIC_HTTPS=true (HIPAA) | PDF_TOKEN_TTL_MINUTES set appropriately (default 60) | Audit logging enabled per policy (if required) | . Networking . | DNS and TLS valid (no warnings) | Callback reachable from internet | . Smoke Test . | Admin Console → Send: test PDF to known number | Status updates received via /phaxio-callback | Pages count matches expectations | . Runbooks . | Callback failure → verify signature header, endpoint reachability, secrets | PDF fetch failure → check token/TTL and PUBLIC_API_URL | . Approvals . | Security sign‑off: | Operations sign‑off: | . References: Phaxio API v2.1 (create/send, webhooks), HIPAA — see Third‑Party page. ",
    "url": "/Faxbot/go-live/phaxio/one-pager/#phaxio-golive--onepager",
    
    "relUrl": "/go-live/phaxio/one-pager/#phaxio-golive--onepager"
  },"138": {
    "doc": "Phaxio — One‑Pager (Print)",
    "title": "Phaxio — One‑Pager (Print)",
    "content": " ",
    "url": "/Faxbot/go-live/phaxio/one-pager/",
    
    "relUrl": "/go-live/phaxio/one-pager/"
  },"139": {
    "doc": "Phaxio Setup",
    "title": "Phaxio Setup",
    "content": " ",
    "url": "/Faxbot/backends/phaxio-setup.html",
    
    "relUrl": "/backends/phaxio-setup.html"
  },"140": {
    "doc": "Phaxio Setup",
    "title": "Overview",
    "content": ". | Cloud backend for sending faxes via Phaxio (also branded “Phaxio by Sinch”). | Easiest option; no SIP or telephony expertise required. | Send-only (no receiving). | . ",
    "url": "/Faxbot/backends/phaxio-setup.html#overview",
    
    "relUrl": "/backends/phaxio-setup.html#overview"
  },"141": {
    "doc": "Phaxio Setup",
    "title": "Prerequisites",
    "content": ". | Phaxio account and API credentials. | Public URL for callbacks and PDF access (domain or tunnel like ngrok). | Docker and Docker Compose installed. | . ",
    "url": "/Faxbot/backends/phaxio-setup.html#prerequisites",
    
    "relUrl": "/backends/phaxio-setup.html#prerequisites"
  },"142": {
    "doc": "Phaxio Setup",
    "title": "Steps",
    "content": "1) Create Phaxio account and get credentials . | Log in to the Phaxio console and retrieve: . | PHAXIO_API_KEY | PHAXIO_API_SECRET | . | . Note on branding: New Phaxio signups and dashboards may redirect to Sinch. That is expected — Phaxio is a Sinch company. This backend continues to work with those credentials. 2) Set environment variables . | Edit .env (or create from .env.example). Set: FAX_BACKEND=phaxio PHAXIO_API_KEY=your_key PHAXIO_API_SECRET=your_secret PUBLIC_API_URL=https://your-domain.com PHAXIO_CALLBACK_URL=https://your-domain.com/phaxio-callback # Preferred name # PHAXIO_STATUS_CALLBACK_URL=https://your-domain.com/phaxio-callback # Alias also supported API_KEY=your_secure_api_key # Optional but recommended; used as X-API-Key . | Note: PUBLIC_API_URL must be reachable by Phaxio to fetch PDFs. | For production, set ENFORCE_PUBLIC_HTTPS=true to require HTTPS (recommended). For local testing, leave it false. | . Sinch v3 vs legacy Phaxio: If you prefer Sinch’s Fax API v3 “direct upload” flow, use the separate sinch backend instead (see SINCH_SETUP.md). This guide covers the classic Phaxio-style flow where the provider fetches your PDF via a tokenized URL and posts status to /phaxio-callback. 3) Start the API . make up-cloud # or: docker compose up -d --build api . | API will listen on http://localhost:8080 by default. | . How this works: you talk to the Faxbot API (your local/server endpoint). Faxbot then calls the official Phaxio API on your behalf and gives Phaxio a public URL to fetch your PDF. You do not call Phaxio endpoints directly from your client. Ensure PUBLIC_API_URL is reachable from Phaxio and that your callback URL (PHAXIO_CALLBACK_URL or PHAXIO_STATUS_CALLBACK_URL) points back to your server. 4) Test sending a fax . | Convert TXT→PDF→TIFF is handled automatically. | Example (replace number): curl -X POST http://localhost:8080/fax \\ -H \"X-API-Key: your_secure_api_key\" \\ -F to=+15551234567 \\ -F file=@./example.pdf . | Response includes id, status, backend, timestamps. | Check status: curl -H \"X-API-Key: your_secure_api_key\" http://localhost:8080/fax/&lt;job_id&gt; . | . 5) Configure callback (optional but recommended) . | Phaxio will POST status to your callback URL (PHAXIO_CALLBACK_URL or PHAXIO_STATUS_CALLBACK_URL). | This API exposes POST /phaxio-callback and will update job status when the request includes ?job_id=&lt;id&gt;. | Ensure your PUBLIC_API_URL and callback URL are reachable from Phaxio. | Security: by default, callbacks must include a valid X-Phaxio-Signature (HMAC-SHA256 of the raw body using PHAXIO_API_SECRET). You can disable this by setting PHAXIO_VERIFY_SIGNATURE=false (not recommended). | Optional retention: set ARTIFACT_TTL_DAYS&gt;0 to automatically delete PDFs after the specified number of days (cleanup runs daily by default). | . ",
    "url": "/Faxbot/backends/phaxio-setup.html#steps",
    
    "relUrl": "/backends/phaxio-setup.html#steps"
  },"143": {
    "doc": "Phaxio Setup",
    "title": "Costs &amp; HIPAA",
    "content": ". | Phaxio pricing: see their site for per-page costs. | HIPAA information (BAA): https://www.phaxio.com/docs/security/hipaa | . ",
    "url": "/Faxbot/backends/phaxio-setup.html#costs--hipaa",
    
    "relUrl": "/backends/phaxio-setup.html#costs--hipaa"
  },"144": {
    "doc": "Phaxio Setup",
    "title": "Security Notes",
    "content": ". | Set a strong API_KEY and send it as X-API-Key. | Rate limit and restrict access via reverse proxy (nginx, Caddy, etc.). | The PDF serving endpoint uses a tokenized URL; treat PUBLIC_API_URL as sensitive. | Use HTTPS for PUBLIC_API_URL in production so Phaxio fetches over TLS. HTTP is fine for local development only. | . ",
    "url": "/Faxbot/backends/phaxio-setup.html#security-notes",
    
    "relUrl": "/backends/phaxio-setup.html#security-notes"
  },"145": {
    "doc": "Phaxio Setup",
    "title": "Number Format",
    "content": ". | Use E.164 format (e.g., +15551234567) for best results. | The backend performs limited normalization for non‑E.164 input, but E.164 avoids ambiguity across regions. | . ",
    "url": "/Faxbot/backends/phaxio-setup.html#number-format",
    
    "relUrl": "/backends/phaxio-setup.html#number-format"
  },"146": {
    "doc": "Phaxio Setup",
    "title": "Troubleshooting",
    "content": ". | “phaxio not configured”: verify FAX_BACKEND=phaxio and both API key/secret. | No status updates: confirm callback URL and public reachability. | 403 when fetching PDF: token mismatch or expired URL. | See docs/TROUBLESHOOTING.md for more. | . ",
    "url": "/Faxbot/backends/phaxio-setup.html#troubleshooting",
    
    "relUrl": "/backends/phaxio-setup.html#troubleshooting"
  },"147": {
    "doc": "Phaxio Setup",
    "title": "Official References",
    "content": ". | API Reference (v2/v2.1): https://www.phaxio.com/docs/api/v2/ | Create and send a fax (content_url): https://www.phaxio.com/docs/api/v2.1/faxes/create_and_send_fax | Send fax webhooks: https://www.phaxio.com/docs/api/v2.1/faxes/send_webhooks | HIPAA guidance: https://www.phaxio.com/docs/security/hipaa | . ",
    "url": "/Faxbot/backends/phaxio-setup.html#official-references",
    
    "relUrl": "/backends/phaxio-setup.html#official-references"
  },"148": {
    "doc": "Phaxio Setup",
    "title": "Related: Sinch Fax API v3",
    "content": "Phaxio is part of Sinch. If your console shows Sinch and you prefer the v3 API’s direct upload model (and features like their own webhooks), use the sinch backend. See SINCH_SETUP.md. Your existing Phaxio credentials typically work as Sinch API credentials; you will also need the Sinch Project ID. ",
    "url": "/Faxbot/backends/phaxio-setup.html#related-sinch-fax-api-v3",
    
    "relUrl": "/backends/phaxio-setup.html#related-sinch-fax-api-v3"
  },"149": {
    "doc": "Phaxio Go‑Live",
    "title": "Phaxio Go‑Live Checklist",
    "content": "Accounts &amp; Legal . | Phaxio account active; credentials verified | BAA executed (for HIPAA) | Provider storage disabled in Phaxio console (HIPAA) | . Faxbot Configuration . | Backend set to phaxio | PHAXIO_API_KEY and PHAXIO_API_SECRET set | PUBLIC_API_URL points to HTTPS domain | Callback URL set to &lt;PUBLIC_API_URL&gt;/phaxio-callback and configured in Phaxio console | Signature verification enabled: PHAXIO_VERIFY_SIGNATURE=true (HIPAA) | . Security . | API_KEY set and clients include X-API-Key | ENFORCE_PUBLIC_HTTPS=true (HIPAA) | Audit logging enabled if required by policy | PDF_TOKEN_TTL_MINUTES set appropriately (default 60) | . Networking &amp; Reachability . | Public DNS/TLS validated (no self‑signed certificates in production) | Callback and PDF token URL accessible to Phaxio | . Smoke Tests . | Send test fax from Admin Console and via SDK (Node/Python) | Observe status update via /phaxio-callback | Confirm pages reported and final status SUCCESS/FAILED as expected | . Runbooks . | On callback failures: check signature header, endpoint reachability, and secrets | On PDF fetch failures: check token, TTL, and public HTTPS URL | . ",
    "url": "/Faxbot/go-live/phaxio/#phaxio-golive-checklist",
    
    "relUrl": "/go-live/phaxio/#phaxio-golive-checklist"
  },"150": {
    "doc": "Phaxio Go‑Live",
    "title": "Phaxio Go‑Live",
    "content": " ",
    "url": "/Faxbot/go-live/phaxio/",
    
    "relUrl": "/go-live/phaxio/"
  },"151": {
    "doc": "Plugin Builder",
    "title": "Plugin Builder",
    "content": "Generate a starter outbound plugin (Python or Node) with a guided wizard. Where . | Admin Console → Plugins → “Build Plugin” (preview) | . What it creates . | Python class extending FaxPlugin with send_fax/get_status | Node class extending FaxPlugin with sendFax/getStatus | JSON manifest fields: id, name, version, categories, capabilities, config schema | . How to use 1) Enter basic info (name, id, version) 2) Choose SDK (Python/Node) 3) Provider settings (e.g., SIP trunk label, require T.38) 4) Capabilities (send, get_status) 5) Review &amp; Generate → download the source file . Next steps . | Place the generated plugin in your plugin workspace | Implement transport‑specific logic (e.g., AMI call for SIP or custom cloud API) | Keep secrets in environment; only non‑secret settings go into plugin config | . References . | Plugins (v3): Overview | . ",
    "url": "/Faxbot/admin-console/plugin-builder/",
    
    "relUrl": "/admin-console/plugin-builder/"
  },"152": {
    "doc": "Create a Public URL (Tunnels)",
    "title": "Create a Public URL (Tunnels)",
    "content": "Why . | Cloud backends (Phaxio) must fetch your PDFs and post callbacks. During testing, use a tunnel to expose a local server securely. | . Options . | Cloudflare Tunnel (cloudflared) — preferred | ngrok — alternative | . One‑command helper . | Use scripts/setup-phaxio-tunnel.sh . | Finds/starts a tunnel | Sets PUBLIC_API_URL and PHAXIO_CALLBACK_URL | Restarts the API container if Docker is available | . | . Manual steps 1) Start your tunnel to http://localhost:8080 2) Set PUBLIC_API_URL to the https tunnel URL 3) Set PHAXIO_CALLBACK_URL to $PUBLIC_API_URL/phaxio-callback 4) Apply changes in the Admin Console and verify in Diagnostics . Notes . | For production, use a real HTTPS domain and TLS termination | . ",
    "url": "/Faxbot/guides/public-url-tunnel/",
    
    "relUrl": "/guides/public-url-tunnel/"
  },"153": {
    "doc": "Python SDK",
    "title": "Faxbot Python SDK",
    "content": "Thin Python client for the Faxbot API. Sends faxes and checks status via the unified Faxbot REST API (independent of the server’s backend: Phaxio or SIP/Asterisk). | Package name: faxbot | Requires: Python 3.7+ | . ",
    "url": "/Faxbot/development/python-sdk.html#faxbot-python-sdk",
    
    "relUrl": "/development/python-sdk.html#faxbot-python-sdk"
  },"154": {
    "doc": "Python SDK",
    "title": "Install",
    "content": ". | From PyPI (once published): pip install faxbot . | From source (this repo): cd sdks/python pip install . | . ",
    "url": "/Faxbot/development/python-sdk.html#install",
    
    "relUrl": "/development/python-sdk.html#install"
  },"155": {
    "doc": "Python SDK",
    "title": "Usage",
    "content": "from faxbot import FaxbotClient client = FaxbotClient(base_url=\"http://localhost:8080\", api_key=\"YOUR_API_KEY\") job = client.send_fax(\"+15551234567\", \"/path/to/document.pdf\") print(\"Queued job:\", job[\"id\"], job[\"status\"]) status = client.get_status(job[\"id\"]) print(\"Status:\", status[\"status\"]) . ",
    "url": "/Faxbot/development/python-sdk.html#usage",
    
    "relUrl": "/development/python-sdk.html#usage"
  },"156": {
    "doc": "Python SDK",
    "title": "Notes",
    "content": ". | Only .pdf and .txt files are accepted. | If the server requires an API key, it must be supplied via X-API-Key (handled automatically when api_key is provided). | Optional helper: check_health() pings /health. | . ",
    "url": "/Faxbot/development/python-sdk.html#notes",
    
    "relUrl": "/development/python-sdk.html#notes"
  },"157": {
    "doc": "Python SDK",
    "title": "Publishing (maintainers)",
    "content": ". | Configure GitHub secret PYPI_API_TOKEN. | Create a GitHub Release to trigger publish via CI. | . ",
    "url": "/Faxbot/development/python-sdk.html#publishing-maintainers",
    
    "relUrl": "/development/python-sdk.html#publishing-maintainers"
  },"158": {
    "doc": "Python SDK",
    "title": "MCP Note",
    "content": ". | MCP (Model Context Protocol) is not part of this SDK. It is a separate integration layer for AI assistants. | Refer to docs/MCP_INTEGRATION.md in the repository for MCP setup and usage. | . ",
    "url": "/Faxbot/development/python-sdk.html#mcp-note",
    
    "relUrl": "/development/python-sdk.html#mcp-note"
  },"159": {
    "doc": "Python SDK",
    "title": "Python SDK",
    "content": " ",
    "url": "/Faxbot/development/python-sdk.html",
    
    "relUrl": "/development/python-sdk.html"
  },"160": {
    "doc": "Python SDK",
    "title": "Python SDK",
    "content": "Install . | Local project includes the SDK in sdks/python/. | . Usage . from faxbot import FaxbotClient client = FaxbotClient('http://localhost:8080', 'your_api_key') job = client.send_fax('+15551234567', '/path/to/document.pdf') status = client.get_status(job['id']) ok = client.check_health() . Errors . | 400: invalid phone or params | 401: missing/invalid API key | 404: job not found | 413: file too large | 415: unsupported type | . ",
    "url": "/Faxbot/sdks/python/",
    
    "relUrl": "/sdks/python/"
  },"161": {
    "doc": "Python MCP",
    "title": "Python MCP",
    "content": "Stdio server . | Path: python_mcp/stdio_server.py | Env: FAX_API_URL, optional API_KEY | Start: . | python -m venv .venv &amp;&amp; source .venv/bin/activate | pip install -r requirements.txt | export FAX_API_URL=http://localhost:8080 | python stdio_server.py | . | . SSE server (OAuth2/JWT) . | Path: python_mcp/server.py | Env: . | OAUTH_ISSUER, OAUTH_AUDIENCE, optional OAUTH_JWKS_URL | FAX_API_URL, optional API_KEY | . | Start: uvicorn server:app --host 0.0.0.0 --port 3003 | . Tools . | send_fax(to, filePath | fileContent+fileName[, fileType]) | get_fax_status(jobId) | . ",
    "url": "/Faxbot/mcp/python/",
    
    "relUrl": "/mcp/python/"
  },"162": {
    "doc": "Real Estate",
    "title": "Real Estate Playbook",
    "content": "Goal . | Send and receive offer paperwork quickly without unnecessary friction. | . Setup . | Backend: Phaxio or Sinch (cloud) for simplicity | Security: enable API key; HTTPS strongly recommended | . Sending . | Admin Console → Send: attach PDF and send to recipient | Keep files small (under 10 MB) | . Tracking . | Admin Console → Jobs: watch for Success/Failed; retry if needed | . Common issues . | 401 Unauthorized: set and use API key | Callback delays: confirm public URL reachability and correct callback path | . When to consider SIP/Asterisk . | High‑volume offices wanting to reduce per‑fax costs and with in‑house telephony expertise | . ",
    "url": "/Faxbot/playbooks/real-estate/#real-estate-playbook",
    
    "relUrl": "/playbooks/real-estate/#real-estate-playbook"
  },"163": {
    "doc": "Real Estate",
    "title": "Real Estate",
    "content": " ",
    "url": "/Faxbot/playbooks/real-estate/",
    
    "relUrl": "/playbooks/real-estate/"
  },"164": {
    "doc": "Client SDKs",
    "title": "Client SDKs",
    "content": "Thin, official clients for the Faxbot API. They call the unified Faxbot REST API (no direct Phaxio/Asterisk calls). Current version alignment: Python 1.0.2, Node 1.0.2. | Python: faxbot | Node.js: faxbot | . ",
    "url": "/Faxbot/development/sdks.html",
    
    "relUrl": "/development/sdks.html"
  },"165": {
    "doc": "Client SDKs",
    "title": "Python",
    "content": ". | Install: pip install faxbot . | Usage: ```python from faxbot import FaxbotClient | . client = FaxbotClient(base_url=”http://localhost:8080”, api_key=”YOUR_API_KEY”) job = client.send_fax(“+15551234567”, “/path/to/document.pdf”) print(“Queued:”, job[“id”], job[“status”]) status = client.get_status(job[“id”]) print(“Status:”, status[“status”]) . - Notes: - Only `.pdf` and `.txt` files are accepted. - If `API_KEY` is enabled on the server, the client sends it via `X-API-Key`. - Optional: `check_health()` calls `/health`. ## Node.js - Install: . npm install faxbot . - Usage: ```js const FaxbotClient = require('faxbot'); const client = new FaxbotClient('http://localhost:8080', 'YOUR_API_KEY'); (async () =&gt; { const job = await client.sendFax('+15551234567', '/path/to/document.pdf'); console.log('Queued:', job.id, job.status); const status = await client.getStatus(job.id); console.log('Status:', status.status); })(); . | Notes: . | Only .pdf and .txt files are accepted. | If API_KEY is enabled, X-API-Key header is added automatically. | Optional: checkHealth() calls /health. | . | . ",
    "url": "/Faxbot/development/sdks.html#python",
    
    "relUrl": "/development/sdks.html#python"
  },"166": {
    "doc": "Client SDKs",
    "title": "Errors",
    "content": ". | The SDKs raise/throw on non-2xx responses. Common cases: . | 400: invalid phone number or parameters | 401: missing/invalid API key | 413: file too large | 415: unsupported media type (non-PDF/TXT) | 404: job not found (for GET /fax/{id}) | . | . ",
    "url": "/Faxbot/development/sdks.html#errors",
    
    "relUrl": "/development/sdks.html#errors"
  },"167": {
    "doc": "Client SDKs",
    "title": "Compatibility",
    "content": ". | The SDKs work regardless of backend (phaxio, sinch, or sip) because Faxbot abstracts the difference. | . ",
    "url": "/Faxbot/development/sdks.html#compatibility",
    
    "relUrl": "/development/sdks.html#compatibility"
  },"168": {
    "doc": "Client SDKs",
    "title": "MCP vs SDK",
    "content": ". | The SDKs do not include MCP (Model Context Protocol) logic. They are simple HTTP clients for developers. | MCP integration is a separate component (stdio/HTTP servers) for AI assistants. | See the guide: docs/MCP_INTEGRATION.md for setup, transports, and examples. | . ",
    "url": "/Faxbot/development/sdks.html#mcp-vs-sdk",
    
    "relUrl": "/development/sdks.html#mcp-vs-sdk"
  },"169": {
    "doc": "Settings",
    "title": "Settings",
    "content": "Adjust backend, security, MCP, and storage without manual edits. Backend . | Select active backend: phaxio | sinch | sip | . | Phaxio . | PHAXIO_API_KEY, PHAXIO_API_SECRET (secret inputs) | PHAXIO_CALLBACK_URL or PHAXIO_STATUS_CALLBACK_URL | Toggle “Verify signatures” → PHAXIO_VERIFY_SIGNATURE=true | . | Sinch . | SINCH_PROJECT_ID, SINCH_API_KEY, SINCH_API_SECRET | Optional SINCH_BASE_URL | . | SIP/Asterisk . | ASTERISK_AMI_HOST, ASTERISK_AMI_PORT, ASTERISK_AMI_USERNAME, ASTERISK_AMI_PASSWORD | Presentation: FAX_LOCAL_STATION_ID, FAX_HEADER | . | . Security . | Require API key: sets API_KEY and enables auth on REST endpoints | Enforce HTTPS for cloud fetches: ENFORCE_PUBLIC_HTTPS | Audit events: AUDIT_LOG_ENABLED, format/file/syslog options | File limits: MAX_FILE_SIZE_MB (default 10 MB) | . MCP (Tools) . | Enable SSE (Python/Node) and configure OAuth2/JWT for HIPAA use | Copy‑ready configs for popular assistants | . Storage (Inbound) . | Local (dev only) or S3/S3‑compatible with KMS support | Fields: bucket, region, prefix, endpoint URL, KMS Key ID (secrets via environment/role) | See also: AWS S3 SSE‑KMS (https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html) | . Persistence . | Enable persisted .env on startup (local only) to reload saved settings | Export .env for review in change control systems | . Learn more . | Backends: Phaxio, Sinch, SIP/Asterisk | Security: Authentication, HIPAA, OAuth/OIDC | Third‑Party: /third-party/ | . ",
    "url": "/Faxbot/admin-console/settings/",
    
    "relUrl": "/admin-console/settings/"
  },"170": {
    "doc": "Setup Wizard",
    "title": "Setup Wizard",
    "content": "Configure Faxbot end‑to‑end without touching .env files. The wizard validates inputs, applies safe defaults, and provides copy‑ready exports. Steps . | Choose Backend . | Phaxio (recommended): requires API key/secret and public HTTPS URL | Sinch Fax API v3: requires project ID, API key/secret | SIP/Asterisk: requires AMI host/port/username/password | . | Security Profile . | HIPAA (strict): require API key, enforce HTTPS, enable audit logging, verify signatures | Non‑PHI (convenience): relaxed HTTPS and logging defaults; still supports API keys | . | Provider Details . | Phaxio: set PHAXIO_CALLBACK_URL (usually &lt;PUBLIC_API_URL&gt;/phaxio-callback) | Sinch: set project region/base URL if needed | SIP: confirm Station ID and Header (sender metadata) | . | Apply &amp; Reload . | Writes settings to the running process; shows status banner | “Generate .env” exports a file for persistence; you can also “Save .env to server” if persisted settings are enabled | . | . Helpful tips . | Use a tunnel during initial Phaxio testing (cloudflared/ngrok). See: Deployment and scripts/setup-phaxio-tunnel.sh. | If “Restart API” is available, changes that affect connections (e.g., AMI) will prompt a restart. | The wizard never stores provider secrets in plugin config. Secrets live in environment variables. | . Example .env snippets . | Phaxio (HIPAA profile) FAX_BACKEND=phaxio PHAXIO_API_KEY=... PHAXIO_API_SECRET=... PUBLIC_API_URL=https://yourdomain.example PHAXIO_CALLBACK_URL=https://yourdomain.example/phaxio-callback PHAXIO_VERIFY_SIGNATURE=true API_KEY=generate_a_strong_key ENFORCE_PUBLIC_HTTPS=true AUDIT_LOG_ENABLED=true PDF_TOKEN_TTL_MINUTES=60 . | Sinch (direct upload) FAX_BACKEND=sinch SINCH_PROJECT_ID=... SINCH_API_KEY=... SINCH_API_SECRET=... # Optional regional override # SINCH_BASE_URL=https://us.fax.api.sinch.com/v3 API_KEY=generate_a_strong_key . | SIP/Asterisk (self‑hosted) FAX_BACKEND=sip ASTERISK_AMI_HOST=asterisk ASTERISK_AMI_PORT=5038 ASTERISK_AMI_USERNAME=api ASTERISK_AMI_PASSWORD=change_me FAX_LOCAL_STATION_ID=+15551234567 FAX_HEADER=Faxbot API_KEY=generate_a_strong_key . | . Warnings and prompts . | Missing HTTPS on PUBLIC_API_URL with cloud backends → show warning, suggest tunnel/domain | Empty API_KEY in production → prompt to enable auth | Ghostscript not found for SIP/Asterisk → warn that conversion/pages may be stubbed | . Learn more . | Phaxio: Backend setup | Sinch: Backend setup | SIP/Asterisk: Backend setup | Security: Authentication, HIPAA, OAuth/OIDC | . ",
    "url": "/Faxbot/admin-console/setup-wizard/",
    
    "relUrl": "/admin-console/setup-wizard/"
  },"171": {
    "doc": "Sinch — One‑Pager (Print)",
    "title": "Sinch Go‑Live — One‑Pager",
    "content": "Organization: ___ Environment: Dev / Staging / Prod Date: _______ . Accounts &amp; Project . | Sinch project with Fax API enabled | SINCH_PROJECT_ID documented; API key/secret verified | SINCH_BASE_URL set if using regional endpoint | . Faxbot Configuration . | FAX_BACKEND=sinch | API_KEY set; clients send X-API-Key | . Security . | TLS termination in front of API (HTTPS endpoints) | Audit logging enabled if policy requires | . Smoke Test . | Admin Console → Send: test PDF | SDK send (Node/Python) returns expected status | . Runbooks . | Create fax error → verify project/region and credentials | Status handling → understand initial provider response vs eventual delivery | . Approvals . | Security sign‑off: | Operations sign‑off: | . References: Sinch Fax overview &amp; API reference — see Third‑Party page. ",
    "url": "/Faxbot/go-live/sinch/one-pager/#sinch-golive--onepager",
    
    "relUrl": "/go-live/sinch/one-pager/#sinch-golive--onepager"
  },"172": {
    "doc": "Sinch — One‑Pager (Print)",
    "title": "Sinch — One‑Pager (Print)",
    "content": " ",
    "url": "/Faxbot/go-live/sinch/one-pager/",
    
    "relUrl": "/go-live/sinch/one-pager/"
  },"173": {
    "doc": "Sinch Setup",
    "title": "Sinch Setup",
    "content": "Cloud backend using Sinch Fax API v3 (“Phaxio by Sinch”). This backend uploads your PDF directly to Sinch rather than serving a tokenized URL. When to use . | Prefer this if you have a Sinch account/project and want the v3 direct‑upload flow. | If you signed up at Phaxio and were redirected to Sinch, your credentials generally work here. You will also need your Sinch Project ID. | . Key differences vs phaxio backend . | phaxio: Provider fetches your PDF via PUBLIC_API_URL and posts status to /phaxio-callback (HMAC verification supported). No Sinch project ID required. | sinch: Faxbot uploads your PDF directly to Sinch (multipart). PUBLIC_API_URL and /phaxio-callback are not used. Webhook integration for Sinch is under evaluation; current builds reflect the provider’s initial status response. | . Environment . FAX_BACKEND=sinch SINCH_PROJECT_ID=your_project_id SINCH_API_KEY=your_api_key # falls back to PHAXIO_API_KEY if unset SINCH_API_SECRET=your_api_secret # falls back to PHAXIO_API_SECRET if unset # Optional override region/base URL: # SINCH_BASE_URL=https://fax.api.sinch.com/v3 # General API_KEY=your_secure_api_key # optional but recommended (X-API-Key) MAX_FILE_SIZE_MB=10 . Send a fax (curl) . curl -X POST http://localhost:8080/fax \\ -H \"X-API-Key: $API_KEY\" \\ -F to=+15551234567 \\ -F file=@./example.pdf . The response includes a job ID and the backend: \"sinch\" field. Status updates . | Immediate status is mapped from Sinch’s response. Additional webhook handling may be added later; for now, poll your own app state via GET /fax/{id}. | . Notes . | Only PDF and TXT files are accepted. Convert images (PNG/JPG) to PDF first. | Avoid exposing credentials. Place Faxbot behind HTTPS and a reverse proxy with rate limiting. | . Troubleshooting . | 401: invalid API key to your Faxbot API (set API_KEY and send X-API-Key). | 413: file too large → raise MAX_FILE_SIZE_MB. | 415: unsupported file type → only PDF/TXT. | Sinch API errors: verify Project ID, API key/secret, and region. | . Official References . | Sinch Fax Overview: https://developers.sinch.com/docs/fax/overview/ | API Reference: https://developers.sinch.com/docs/fax/api-reference/ | . ",
    "url": "/Faxbot/backends/sinch-setup.html",
    
    "relUrl": "/backends/sinch-setup.html"
  },"174": {
    "doc": "Sinch Go‑Live",
    "title": "Sinch Go‑Live Checklist",
    "content": "Accounts &amp; Project . | Sinch project with Fax API enabled | Credentials verified: SINCH_PROJECT_ID, SINCH_API_KEY, SINCH_API_SECRET | Region selected; base URL correct (SINCH_BASE_URL if overriding) | . Faxbot Configuration . | Backend set to sinch | API key configured for clients | . Security . | TLS termination in front of API | Audit logging enabled if required by policy | . Smoke Tests . | Admin Console send → status reflects provider response | SDK send (Node/Python) | . Runbooks . | HTTP errors on create fax: check project/region and credentials | Status polling: plan for provider state transitions; webhook evaluation pending (track releases) | . ",
    "url": "/Faxbot/go-live/sinch/#sinch-golive-checklist",
    
    "relUrl": "/go-live/sinch/#sinch-golive-checklist"
  },"175": {
    "doc": "Sinch Go‑Live",
    "title": "Sinch Go‑Live",
    "content": " ",
    "url": "/Faxbot/go-live/sinch/",
    
    "relUrl": "/go-live/sinch/"
  },"176": {
    "doc": "SIP/Asterisk — One‑Pager (Print)",
    "title": "SIP/Asterisk Go‑Live — One‑Pager",
    "content": "Organization: ___ Environment: Dev / Staging / Prod Date: _______ . Telephony &amp; Network . | SIP trunk supports T.38 (UDPTL) | Static IP/DDNS configured | Ports open: 5060 (tcp+udp), 4000–4999/udp (UDPTL) — provider IPs only | AMI (5038) private/internal only | . Asterisk . | Dialplan configured (faxout/faxsend, SendFAX) | UserEvent(FaxResult, ...) emitted | . Faxbot . | FAX_BACKEND=sip | AMI settings verified (host/port/user/password) | Ghostscript installed (PDF→TIFF) | API_KEY set; clients send X-API-Key | . Smoke Test . | Single‑page PDF to known good number | AMI events observed; final status updated in Jobs | . Runbooks . | AMI login failure → check credentials, firewall | TIFF conversion errors → confirm Ghostscript | . Approvals . | Security sign‑off: | Operations sign‑off: | . References: Asterisk AMI, Fax, SendFAX — see Third‑Party page. ",
    "url": "/Faxbot/go-live/sip-asterisk/one-pager/#sipasterisk-golive--onepager",
    
    "relUrl": "/go-live/sip-asterisk/one-pager/#sipasterisk-golive--onepager"
  },"177": {
    "doc": "SIP/Asterisk — One‑Pager (Print)",
    "title": "SIP/Asterisk — One‑Pager (Print)",
    "content": " ",
    "url": "/Faxbot/go-live/sip-asterisk/one-pager/",
    
    "relUrl": "/go-live/sip-asterisk/one-pager/"
  },"178": {
    "doc": "SIP/Asterisk Go‑Live",
    "title": "SIP/Asterisk Go‑Live Checklist",
    "content": "Telephony &amp; Network . | SIP trunk provider supports T.38 | Static IP/DDNS configured; firewall allows provider IPs to 5060 (SIP) and 4000‑4999 (UDPTL) | AMI (5038) is private/internal only | . Asterisk . | Dialplan matches asterisk/etc/asterisk/extensions.conf (faxout/faxsend contexts) | UserEvent(FaxResult, ...) emitted on completion | . Faxbot . | Backend set to sip | AMI settings verified: host/port/user/password | Ghostscript installed on API host for PDF→TIFF | . Security . | API_KEY enabled; reverse proxy applies rate limits | Audit logging as required by policy | . Smoke Tests . | Single‑page PDF to a known good number | Observe AMI events and final status in Jobs | . Runbooks . | On AMI login failure: verify credentials and network path | On TIFF errors: confirm Ghostscript binary and permissions | . ",
    "url": "/Faxbot/go-live/sip-asterisk/#sipasterisk-golive-checklist",
    
    "relUrl": "/go-live/sip-asterisk/#sipasterisk-golive-checklist"
  },"179": {
    "doc": "SIP/Asterisk Go‑Live",
    "title": "SIP/Asterisk Go‑Live",
    "content": " ",
    "url": "/Faxbot/go-live/sip-asterisk/",
    
    "relUrl": "/go-live/sip-asterisk/"
  },"180": {
    "doc": "SIP/Asterisk Cutover Checklist",
    "title": "SIP/Asterisk Cutover Checklist",
    "content": "Audience . | Telephony admins preparing to move from a hosted fax service to self‑hosted. | . Pre‑flight . | Confirm SIP trunk supports T.38 | Assign static IP or DDNS; configure firewall | Open ports: 5060 (SIP), 4000‑4999 (UDPTL) to trunk provider IPs only | Isolate AMI (5038) — private network only | . Server . | Install Ghostscript (gs) on Faxbot API host | Configure Asterisk dialplan per asterisk/etc/asterisk/extensions.conf | Verify AMI credentials: ASTERISK_AMI_HOST/PORT/USERNAME/PASSWORD | . Faxbot Settings . | Backend: SIP/Asterisk | Presentation: FAX_LOCAL_STATION_ID, FAX_HEADER | Security: set API_KEY; consider audit logging | . Tests . | Single‑page PDF send to a known good destination | Observe AMI events: UserEvent(FaxResult...) | Validate pages/status on GET /fax/{id} | . Rollback Plan . | Keep prior hosted service active until acceptance tests pass | . References . | Backend setup | Deployment | . ",
    "url": "/Faxbot/guides/sip-cutover-checklist/",
    
    "relUrl": "/guides/sip-cutover-checklist/"
  },"181": {
    "doc": "SIP Provider Plugins",
    "title": "SIP Provider Plugins",
    "content": "SIP provider plugins are the most common use case. In Faxbot, plugin type follows capability, not protocol. SIP is the transport layer — your plugin should implement the base class that matches what you’re doing: . | SIP for T.38 fax transmission → FaxPlugin (category: outbound) | SIP for SMS via SIP MESSAGE → MessagingPlugin (category: messaging) | SIP for voice (if added in the future) → a new VoicePlugin type | . ",
    "url": "/Faxbot/plugins/sip-provider-plugins.html",
    
    "relUrl": "/plugins/sip-provider-plugins.html"
  },"182": {
    "doc": "SIP Provider Plugins",
    "title": "Typical SIP Fax Provider",
    "content": "For T.38 fax over SIP, create a FaxPlugin with categories: [\"outbound\"] and capabilities: [\"send_fax\", \"get_status\"]. Example manifest.json: . { \"id\": \"faxbot-sip-flowroute\", \"name\": \"Flowroute SIP Fax\", \"categories\": [\"outbound\"], \"capabilities\": [\"send_fax\", \"get_status\"] } . Example plugin skeleton (Python): . from faxbot_plugin_dev import FaxPlugin, SendResult class FlowrouteSIPPlugin(FaxPlugin): async def send_fax(self, to_number, file_path, options=None): # 1. Convert PDF to TIFF # 2. Connect to Asterisk AMI # 3. Originate call with T.38 # 4. Track via channel events return SendResult(job_id=\"...\", backend=self.manifest().id) . ",
    "url": "/Faxbot/plugins/sip-provider-plugins.html#typical-sip-fax-provider",
    
    "relUrl": "/plugins/sip-provider-plugins.html#typical-sip-fax-provider"
  },"183": {
    "doc": "SIP Provider Plugins",
    "title": "Why This Mapping Makes Sense",
    "content": "The existing SIP/Asterisk backend (self‑hosted) is a fax transmission backend alongside Phaxio and Sinch. Each SIP trunk provider (Bandwidth, Flowroute, Twilio SIP, Voxbone, etc.) differs in: . | Authentication methods | T.38 codec preferences | Number formatting requirements | Billing/metadata APIs | Regional coverage | . By packaging each as a plugin, users can install the one that matches their trunk without modifying core. pip install faxbot-sip-bandwidth # or pip install faxbot-sip-flowroute . This design also allows the same SIP provider to offer multiple plugins when appropriate: . | faxbot-twilio-fax — FaxPlugin using Twilio’s SIP trunking for T.38 | faxbot-twilio-sms — MessagingPlugin using Twilio’s SMS API | . Shared authentication or configuration can live in a common internal module if desired, but keep each plugin focused on its capability to avoid backend leakage in the UI and API. ",
    "url": "/Faxbot/plugins/sip-provider-plugins.html#why-this-mapping-makes-sense",
    
    "relUrl": "/plugins/sip-provider-plugins.html#why-this-mapping-makes-sense"
  },"184": {
    "doc": "SIP/Asterisk Setup",
    "title": "SIP/Asterisk Setup",
    "content": " ",
    "url": "/Faxbot/backends/sip-setup.html",
    
    "relUrl": "/backends/sip-setup.html"
  },"185": {
    "doc": "SIP/Asterisk Setup",
    "title": "Overview",
    "content": ". | Self-hosted backend using Asterisk and a SIP trunk with T.38 fax. | Send-only. You don’t need to accept inbound faxes to send. | Full control, no per-fax cloud charges (you still pay your trunk provider). | Requires some networking setup; this guide assumes minimal prior knowledge. | . ",
    "url": "/Faxbot/backends/sip-setup.html#overview",
    
    "relUrl": "/backends/sip-setup.html#overview"
  },"186": {
    "doc": "SIP/Asterisk Setup",
    "title": "What Is SIP? (Crash Course)",
    "content": ". | SIP (Session Initiation Protocol): signaling protocol to set up calls over the internet. | SIP Trunk: your account/connection to a carrier that places calls to the PSTN. | DID (Direct Inward Dialing): a phone number you can buy from a SIP provider. For sending only, a DID is optional but recommended so your caller ID is valid. | T.38: a protocol for fax over IP using UDPTL; more reliable than voice codecs for fax. | UDPTL: the transport for T.38; you must open/forward a port range for it. | AMI (Asterisk Manager Interface): how the API tells Asterisk to start a fax call. | E.164: the international phone number format (e.g., +15551234567). Use E.164 for destinations and caller IDs when possible. | . ",
    "url": "/Faxbot/backends/sip-setup.html#what-is-sip-crash-course",
    
    "relUrl": "/backends/sip-setup.html#what-is-sip-crash-course"
  },"187": {
    "doc": "SIP/Asterisk Setup",
    "title": "Requirements",
    "content": ". | A SIP trunk that supports T.38 over UDPTL | A public/static IP or NAT configured to forward required ports (below) | Docker and Docker Compose | . ",
    "url": "/Faxbot/backends/sip-setup.html#requirements",
    
    "relUrl": "/backends/sip-setup.html#requirements"
  },"188": {
    "doc": "SIP/Asterisk Setup",
    "title": "Networking",
    "content": ". | SIP signaling: 5060/tcp+udp | AMI (Manager): 5038/tcp (internal only; do not expose publicly) | T.38 UDPTL media: 4000–4999/udp | If behind NAT, forward 5060 (tcp+udp) and 4000–4999/udp to the Asterisk host. Keep 5038 internal. | . Tips: . | Many home routers call this “port forwarding” or “virtual servers”. | If your provider supports registration, the trunk will stay up behind NAT; still forward UDPTL. | . Why port forwarding is needed (simple analogy): . | Think of your router like an office front desk. Internet calls arrive at the front desk but don’t know which room (device) to go to. | Port forwarding is the instruction to the front desk: “When fax data comes for room 4000–4999 (UDPTL), send it to the Asterisk machine.” | Without it, the fax data can’t reach your server, and calls fail or time out. | If you use a cloud VM instead of your home network, you don’t need a home router—just open those ports in the VM’s firewall. | . How to set up port forwarding on a typical home router: 1) Find your router brand/model (sticker on the device) and log into its admin page (often 192.168.0.1 or 192.168.1.1). 2) Reserve a fixed LAN IP for the machine running Asterisk (DHCP reservation), e.g., 192.168.1.50. 3) Create port forward rules: . | UDP 4000–4999 → 192.168.1.50 | UDP 5060 and TCP 5060 → 192.168.1.50 4) Save and reboot if required. 5) On your server firewall, also allow those ports. | . If you’re on CGNAT (carrier-grade NAT) or can’t port forward: . | Use a cloud VM (e.g., small Linux instance) with a public IP and open the same ports there. | Or choose the Phaxio cloud backend instead of SIP. | . ",
    "url": "/Faxbot/backends/sip-setup.html#networking",
    
    "relUrl": "/backends/sip-setup.html#networking"
  },"189": {
    "doc": "SIP/Asterisk Setup",
    "title": "Configure Environment",
    "content": "Edit .env: . FAX_BACKEND=sip # AMI (used by API to originate fax calls) ASTERISK_AMI_HOST=asterisk ASTERISK_AMI_PORT=5038 ASTERISK_AMI_USERNAME=api ASTERISK_AMI_PASSWORD=change_me_safe # SIP trunk (from your provider) SIP_USERNAME=your_username SIP_PASSWORD=your_password SIP_SERVER=sip.provider.example SIP_FROM_USER=+15551234567 SIP_FROM_DOMAIN=sip.provider.example # Presentation FAX_LOCAL_STATION_ID=+15551234567 FAX_HEADER=Your Org Name . ",
    "url": "/Faxbot/backends/sip-setup.html#configure-environment",
    
    "relUrl": "/backends/sip-setup.html#configure-environment"
  },"190": {
    "doc": "SIP/Asterisk Setup",
    "title": "Start Services",
    "content": "docker compose up -d --build . | API on 8080, Asterisk on 5060/udp, 5060/tcp, AMI on 5038, UDPTL 4000–4999/udp. | . ",
    "url": "/Faxbot/backends/sip-setup.html#start-services",
    
    "relUrl": "/backends/sip-setup.html#start-services"
  },"191": {
    "doc": "SIP/Asterisk Setup",
    "title": "How It Works",
    "content": ". | API converts input file to PDF, then to fax-optimized TIFF (Ghostscript). | API creates a job and originates a Local channel via AMI. | Asterisk dials your SIP trunk; on answer, executes SendFAX() in T.38. | Asterisk emits UserEvent(FaxResult, …); API updates job status. | . ",
    "url": "/Faxbot/backends/sip-setup.html#how-it-works",
    
    "relUrl": "/backends/sip-setup.html#how-it-works"
  },"192": {
    "doc": "SIP/Asterisk Setup",
    "title": "Logs &amp; Debugging",
    "content": ". | API: docker compose logs -f api | Asterisk: docker compose logs -f asterisk | Inside Asterisk shell: docker exec -it &lt;asterisk_container&gt; asterisk -rvvv . | Check module load: module show like fax | Call flow: watch for SendFAX and FaxResult events | . | . ",
    "url": "/Faxbot/backends/sip-setup.html#logs--debugging",
    
    "relUrl": "/backends/sip-setup.html#logs--debugging"
  },"193": {
    "doc": "SIP/Asterisk Setup",
    "title": "Common Pitfalls",
    "content": ". | T.38 disabled at provider → enable UDPTL and verify udptl.conf range. | NAT issues → enable rtp_symmetric, force_rport, correct match and from_domain. | Wrong credentials → check pjsip.conf generated from templates (envsubst in start.sh). | Ghostscript missing → API warns and stubs conversion; install for production. | CGNAT / no port forwarding → use a cloud VM or Phaxio backend. | . ",
    "url": "/Faxbot/backends/sip-setup.html#common-pitfalls",
    
    "relUrl": "/backends/sip-setup.html#common-pitfalls"
  },"194": {
    "doc": "SIP/Asterisk Setup",
    "title": "Test Send",
    "content": "curl -X POST http://localhost:8080/fax \\ -H \"X-API-Key: your_secure_api_key\" \\ -F to=+15551234567 \\ -F file=@./example.pdf . ",
    "url": "/Faxbot/backends/sip-setup.html#test-send",
    
    "relUrl": "/backends/sip-setup.html#test-send"
  },"195": {
    "doc": "SIP/Asterisk Setup",
    "title": "Choosing a SIP Provider (T.38)",
    "content": "Pick one of these two (beginner-friendly): . 1) Telnyx — developer‑friendly, good for small deployments . | Self‑serve signup, clear portal | T.38 support documented; confirm for your region and use case | HIPAA/BAA: contact Telnyx to sign a BAA before handling PHI | Links: Telnyx Voice/Numbers pricing, HIPAA resources . | https://telnyx.com/ | . | . 2) Flowroute — flexible SIP trunking for small scale . | Self‑serve signup, good DID inventory | T.38 support documented; confirm with support for your route | HIPAA/BAA: contact Flowroute to discuss BAA before handling PHI | Link: https://flowroute.com/pricing-details/ | . | Always ask your provider to confirm T.38 support and sign a BAA if you’ll transmit PHI. | Typical US costs (ballpark): local DID ~$0.5–$2/mo; outbound ~$0.005–$0.02/min. Verify current pricing pages. | . ",
    "url": "/Faxbot/backends/sip-setup.html#choosing-a-sip-provider-t38",
    
    "relUrl": "/backends/sip-setup.html#choosing-a-sip-provider-t38"
  },"196": {
    "doc": "SIP/Asterisk Setup",
    "title": "TLS Signaling &amp; VPN Examples (Advanced)",
    "content": "PJSIP TLS Transport (example) . [transport-tls] type=transport protocol=tls bind=0.0.0.0:5061 method=tlsv1_2 local_net=10.0.0.0/8 cert_file=/etc/asterisk/keys/asterisk.pem priv_key_file=/etc/asterisk/keys/asterisk.key ca_list_file=/etc/asterisk/keys/ca.crt external_media_address=&lt;public_ip&gt; external_signaling_address=&lt;public_ip&gt; . Then reference transport=transport-tls in your trunk endpoint/registration if your provider supports TLS. Site‑to‑Site VPN (WireGuard sketch) . | Provision a WireGuard tunnel between your Asterisk host and the SIP provider’s VPN endpoint. | Route provider IP ranges through the WG interface; restrict firewall to permit SIP/T.38 only via the tunnel. | Example (Asterisk side /etc/wireguard/wg0.conf): ``` [Interface] PrivateKey = Address = 10.7.0.2/32 | . [Peer] PublicKey = Endpoint = :51820 AllowedIPs = PersistentKeepalive = 25 ``` . Restart Asterisk with external_* addresses set to the tunnel’s public IP if required. ",
    "url": "/Faxbot/backends/sip-setup.html#tls-signaling--vpn-examples-advanced",
    
    "relUrl": "/backends/sip-setup.html#tls-signaling--vpn-examples-advanced"
  },"197": {
    "doc": "SIP/Asterisk Setup",
    "title": "Understanding the Asterisk Configuration",
    "content": ". | asterisk/etc/asterisk/templates/pjsip.conf.template is rendered from your .env at container start. | asterisk/etc/asterisk/templates/manager.conf.template uses ${ASTERISK_AMI_USERNAME} as the user section and ${ASTERISK_AMI_PASSWORD} for the secret. Ensure these match your API env so AMI auth succeeds. | The faxout dialplan in extensions.conf uses SendFAX() with T.38 and emits UserEvent(FaxResult) on completion. | The API listens for that event via AMI to update job status. | . ",
    "url": "/Faxbot/backends/sip-setup.html#understanding-the-asterisk-configuration",
    
    "relUrl": "/backends/sip-setup.html#understanding-the-asterisk-configuration"
  },"198": {
    "doc": "SIP/Asterisk Setup",
    "title": "Official References",
    "content": ". | Asterisk Manager Interface (AMI): https://wiki.asterisk.org/wiki/display/AST/Asterisk+Manager+Interface+(AMI) | Fax overview: https://wiki.asterisk.org/wiki/display/AST/Fax | Application SendFAX: https://wiki.asterisk.org/wiki/display/AST/Application_SendFAX | . ",
    "url": "/Faxbot/backends/sip-setup.html#official-references",
    
    "relUrl": "/backends/sip-setup.html#official-references"
  },"199": {
    "doc": "SIP/Asterisk Setup",
    "title": "Minimal Telephony Glossary",
    "content": ". | SIP: signaling protocol for VoIP calls. | SIP Trunk: your carrier connection for inbound/outbound PSTN calls. | DID: a phone number; optional for send-only but helpful for caller ID. | T.38: fax-over-IP protocol (preferred over G.711 for reliable faxing). | UDPTL: transport used by T.38; requires UDP port range open. | AMI: Asterisk Manager Interface; API uses it to originate calls and receive events. | . ",
    "url": "/Faxbot/backends/sip-setup.html#minimal-telephony-glossary",
    
    "relUrl": "/backends/sip-setup.html#minimal-telephony-glossary"
  },"200": {
    "doc": "Third‑Party References",
    "title": "Third‑Party References",
    "content": "Provider docs . | Phaxio API reference (v2/v2.1): https://www.phaxio.com/docs/api/v2/ . | Create and send a fax (content_url): https://www.phaxio.com/docs/api/v2.1/faxes/create_and_send_fax | Send fax webhooks (callbacks): https://www.phaxio.com/docs/api/v2.1/faxes/send_webhooks | HIPAA guidance: https://www.phaxio.com/docs/security/hipaa | . | Sinch Fax API v3 . | Overview: https://developers.sinch.com/docs/fax/overview/ | API Reference: https://developers.sinch.com/docs/fax/api-reference/ | . | Asterisk (self‑hosted backend) . | Asterisk Manager Interface (AMI): https://wiki.asterisk.org/wiki/display/AST/Asterisk+Manager+Interface+(AMI) | Fax overview: https://wiki.asterisk.org/wiki/display/AST/Fax | Application SendFAX: https://wiki.asterisk.org/wiki/display/AST/Application_SendFAX | . | . Tools . | Ghostscript (PDF↔TIFF utilities): https://ghostscript.com/docs/ | Cloudflare Tunnel . | Overview: https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/ | Quick Tunnels (trycloudflare): https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/do-more-with-tunnels/trycloudflare/ | . | ngrok (HTTP tunnels): https://ngrok.com/docs/guides/http/ | . Object storage (S3) . | AWS S3 SSE‑KMS: https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html | S3‑compatible platforms (e.g., MinIO): https://min.io/ | . OAuth / JWT (MCP SSE) . | OpenID Connect Discovery 1.0: https://openid.net/specs/openid-connect-discovery-1_0.html | JSON Web Key (JWK) RFC 7517: https://www.rfc-editor.org/rfc/rfc7517 | JSON Web Token (JWT) RFC 7519: https://www.rfc-editor.org/rfc/rfc7519 | . Notes . | Use the links above for provider‑specific troubleshooting; do not mix backend instructions. | . ",
    "url": "/Faxbot/third-party/",
    
    "relUrl": "/third-party/"
  },"201": {
    "doc": "Transports",
    "title": "Transports",
    "content": "Stdio . | Best for desktop assistants; avoids base64 limits | Prefer filePath for fidelity | . HTTP (streamable) . | Node implementation at /mcp | JSON body size limit ~16 MB | Use API key for Faxbot REST calls from tools via environment (API_KEY) | . SSE + OAuth2 . | Node and Python servers require Bearer JWT with issuer/audience and JWKS | Configure: OAUTH_ISSUER, OAUTH_AUDIENCE, optional OAUTH_JWKS_URL | Always run behind TLS | . Limits . | REST API raw file limit: MAX_FILE_SIZE_MB (default 10 MB) | Node MCP JSON body limit: ~16 MB base64 payload | . ",
    "url": "/Faxbot/mcp/transports/",
    
    "relUrl": "/mcp/transports/"
  },"202": {
    "doc": "Troubleshooting",
    "title": "Troubleshooting",
    "content": " ",
    "url": "/Faxbot/development/troubleshooting.html",
    
    "relUrl": "/development/troubleshooting.html"
  },"203": {
    "doc": "Troubleshooting",
    "title": "General",
    "content": ". | 401 Invalid API key: set API_KEY and pass X-API-Key header. | 413 File too large: adjust MAX_FILE_SIZE_MB. | 415 Unsupported file type: only PDF and TXT allowed. | Prefer HTTPS for PUBLIC_API_URL in production. The cloud backend fetches PDFs from your server; use TLS. | . ",
    "url": "/Faxbot/development/troubleshooting.html#general",
    
    "relUrl": "/development/troubleshooting.html#general"
  },"204": {
    "doc": "Troubleshooting",
    "title": "Phaxio Backend",
    "content": ". | “phaxio not configured”: ensure FAX_BACKEND=phaxio, PHAXIO_API_KEY, PHAXIO_API_SECRET. | No status updates: verify your callback URL (PHAXIO_CALLBACK_URL or PHAXIO_STATUS_CALLBACK_URL) and that your server is publicly reachable. | 403 on /fax/{id}/pdf: invalid token or wrong PUBLIC_API_URL. | Phaxio API error: confirm credentials and sufficient account balance. | . ",
    "url": "/Faxbot/development/troubleshooting.html#phaxio-backend",
    
    "relUrl": "/development/troubleshooting.html#phaxio-backend"
  },"205": {
    "doc": "Troubleshooting",
    "title": "Sinch Fax API v3 Backend",
    "content": ". | “sinch not configured”: ensure FAX_BACKEND=sinch, SINCH_PROJECT_ID, SINCH_API_KEY, SINCH_API_SECRET (or set PHAXIO_API_KEY/SECRET which are used as fallback values). | Region/base URL: if requests fail, try SINCH_BASE_URL (e.g., https://us.fax.api.sinch.com/v3). | Webhooks: current build does not expose a Sinch webhook endpoint; status reflects the immediate response from Sinch. Poll your job via GET /fax/{id} if needed. | . ",
    "url": "/Faxbot/development/troubleshooting.html#sinch-fax-api-v3-backend",
    
    "relUrl": "/development/troubleshooting.html#sinch-fax-api-v3-backend"
  },"206": {
    "doc": "Troubleshooting",
    "title": "SIP/Asterisk Backend",
    "content": ". | AMI connection failed: . | Asterisk container running and reachable on 5038. | ASTERISK_AMI_* match manager.conf template. | API logs show reconnect with exponential backoff. | . | T.38 negotiation failed: . | Provider supports UDPTL. | Firewall forwards UDP 4000-4999. | pjsip.conf has t38_udptl=yes and redundancy. | . | No fax send: . | Check Asterisk logs for SendFAX and FaxResult events. | Validate destination formatting. | . | . ",
    "url": "/Faxbot/development/troubleshooting.html#sipasterisk-backend",
    
    "relUrl": "/development/troubleshooting.html#sipasterisk-backend"
  },"207": {
    "doc": "Troubleshooting",
    "title": "Conversion",
    "content": ". | Ghostscript missing: API warns and stubs TIFF conversion; install ghostscript for production. | Garbled pages: use clean PDF fonts or provide PDF instead of TXT. | . ",
    "url": "/Faxbot/development/troubleshooting.html#conversion",
    
    "relUrl": "/development/troubleshooting.html#conversion"
  },"208": {
    "doc": "Troubleshooting",
    "title": "MCP (AI Assistant Integration)",
    "content": "Transport Selection Issues . If you’re unsure which MCP transport to use: . | Transport | File | Port | Auth | Use Case | . | stdio | node_mcp/src/servers/stdio.js (Node) or python_mcp/stdio_server.py (Python) | N/A | API key | Desktop AI | . | HTTP | node_mcp/src/servers/http.js | 3001 | API key | Web apps, cloud AI | . | SSE+OAuth | node_mcp/src/servers/sse.js (Node) or python_mcp/server.py (Python) | 3002/3003 | JWT/Bearer | Enterprise, HIPAA | . | WebSocket | node_mcp/src/servers/ws.js | 3004 | API key (optional) | Realtime dev/testing | . Common MCP Problems . MCP Usage Tips . | Ensure the main Faxbot API is reachable (FAX_API_URL) and your API_KEY is set. | For local files, use tooling that can access your filesystem as needed. | . Connection &amp; Authentication . | MCP server not found: Ensure you’re starting from the correct path: . | Node servers: node_mcp/scripts/start-*.sh | Python servers: python_mcp/ (stdio_server.py, http_server.py, server.py) | . | . Environment . | FAX_API_URL, API_KEY: Required for authentication. | Authentication failures: . | stdio: Check API_KEY environment variable matches Faxbot API setting | HTTP: Verify X-API-Key header is being passed correctly | SSE+OAuth: Confirm JWT token has correct iss, aud, and hasn’t expired | . | Connection refused: . | Ensure main Faxbot API is running on FAX_API_URL (default: http://localhost:8080) | For HTTP/SSE/WS transports, check port availability (3001/3002/3004) | . | “No tools available”: MCP server started successfully but tools not loading - check MCP server logs for initialization errors | . Filesystem Access Required . | Claude can’t read files: Install and configure filesystem MCP server alongside Faxbot MCP | Permission denied: Check filesystem MCP server has access to directory containing your PDFs | Wrong file path: Use absolute paths or ensure filesystem MCP server is configured for correct directories | . File Types and Paths . | Only PDF and TXT are accepted. Convert images (PNG/JPG) to PDF first. | macOS: sips -s format pdf \"in.png\" --out \"out.pdf\" | Linux: img2pdf in.png -o out.pdf or magick convert in.png out.pdf | Filenames with spaces: quote the full path. Example (curl): -F \"file=@'./My File.pdf'\" | macOS screenshot names sometimes include a “narrow no‑break space” (U+202F) that looks like a regular space and breaks shell quoting. If a quoted path still fails, try renaming with a wildcard: cp Screenshot*.pdf doc.pdf and use the new name. | . ",
    "url": "/Faxbot/development/troubleshooting.html#mcp-ai-assistant-integration",
    
    "relUrl": "/development/troubleshooting.html#mcp-ai-assistant-integration"
  },"209": {
    "doc": "Troubleshooting",
    "title": "Reverse Proxy Examples (Rate Limiting)",
    "content": "Nginx (basic example): . server { listen 443 ssl; server_name your-domain.com; # ... ssl_certificate / ssl_certificate_key ... # Simple rate limit per IP limit_req_zone $binary_remote_addr zone=faxbot:10m rate=5r/s; location / { limit_req zone=faxbot burst=10 nodelay; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $host; proxy_pass http://127.0.0.1:8080; } } . Caddy (basic example): . your-domain.com { reverse_proxy 127.0.0.1:8080 # Rate limiting plugins vary; consider layer-4 or WAF if needed } . ",
    "url": "/Faxbot/development/troubleshooting.html#reverse-proxy-examples-rate-limiting",
    
    "relUrl": "/development/troubleshooting.html#reverse-proxy-examples-rate-limiting"
  },"210": {
    "doc": "Troubleshooting",
    "title": "Troubleshooting",
    "content": "Common errors . | 401 Unauthorized . | Set API_KEY on the server and send X-API-Key on every request | . | 415 Unsupported Media Type . | Only PDF and TXT are allowed; convert images to PDF first | . | 413 Payload Too Large . | Default max is MAX_FILE_SIZE_MB=10; reduce file or increase limit | . | 404 Job not found . | Verify the job ID and that the API is using the same database/volume | . | . Statuses . | Stuck in queued . | Phaxio/Sinch: callback not reaching your API. Verify PUBLIC_API_URL and callback path, confirm HTTPS, check provider dashboard for webhook attempts | SIP/Asterisk: AMI events not received. Check AMI connectivity and that dialplan posts UserEvent(FaxResult, ...) | . | Immediate failed . | Phaxio/Sinch: credential issue or content fetch failure (Phaxio). Recheck keys and that GET /fax/{id}/pdf?token=... is reachable | SIP/Asterisk: missing Ghostscript or TIFF conversion; install ghostscript | . | . Phaxio callback . | Ensure PHAXIO_STATUS_CALLBACK_URL (or PHAXIO_CALLBACK_URL) set to &lt;PUBLIC_API_URL&gt;/phaxio-callback | Include ?job_id=&lt;id&gt; on the callback URL so the API can correlate the job | If PHAXIO_VERIFY_SIGNATURE=true, confirm the X-Phaxio-Signature header is present and the secret is correct | . Sinch errors . | “create fax error 4xx/5xx” . | Check SINCH_PROJECT_ID, key/secret, and service region/base URL | Make sure the project has fax enabled | . | . SIP/Asterisk . | AMI login failed . | Validate host/port/user/password; confirm firewall and that the AMI service is reachable only inside your network | . | No pages recorded . | Ensure dialplan emits UserEvent(FaxResult, Pages:...); page count is optional and may be provider‑reported later | . | . Diagnostics . | Use Admin Console → Diagnostics to run checks and follow provided fix links | API: GET /health → { status: \"ok\" } | Logs show warnings for missing API key or insecure public URL when enforcement is on | . More help . | Backends | Deployment | Security | . ",
    "url": "/Faxbot/troubleshooting/",
    
    "relUrl": "/troubleshooting/"
  },"211": {
    "doc": "Webhooks",
    "title": "Webhooks",
    "content": "This page shows provider‑specific webhook endpoints, sample payloads, and signature verification examples. ",
    "url": "/Faxbot/backends/webhooks.html",
    
    "relUrl": "/backends/webhooks.html"
  },"212": {
    "doc": "Webhooks",
    "title": "Outbound Status — Phaxio",
    "content": ". | Endpoint: POST /phaxio-callback?job_id=&lt;faxbot_job_id&gt; | Signature: header X-Phaxio-Signature (HMAC‑SHA256 of the raw body using PHAXIO_API_SECRET) | . Example form payload (Phaxio): . fax[id]=123456&amp;fax[status]=success&amp;fax[num_pages]=2 . Verification (Python): . import hmac, hashlib secret = PHAXIO_API_SECRET.encode() digest = hmac.new(secret, raw_body_bytes, hashlib.sha256).hexdigest() assert hmac.compare_digest(digest, header_value.strip().lower()) . ",
    "url": "/Faxbot/backends/webhooks.html#outbound-status--phaxio",
    
    "relUrl": "/backends/webhooks.html#outbound-status--phaxio"
  },"213": {
    "doc": "Webhooks",
    "title": "Inbound — Phaxio",
    "content": ". | Endpoint: POST /phaxio-inbound | Signature: header X-Phaxio-Signature (HMAC‑SHA256) | . Example JSON payload: . { \"fax\": { \"id\": 98765, \"from\": \"+15551230000\", \"to\": \"+15559870000\", \"num_pages\": 3, \"status\": \"received\", \"file_url\": \"https://files.phaxio.com/...\" } } . Verification (Python): same HMAC pattern as above on the raw request body. ",
    "url": "/Faxbot/backends/webhooks.html#inbound--phaxio",
    
    "relUrl": "/backends/webhooks.html#inbound--phaxio"
  },"214": {
    "doc": "Webhooks",
    "title": "Inbound — Sinch Fax API v3",
    "content": ". | Endpoint: POST /sinch-inbound | Basic auth (optional): set SINCH_INBOUND_BASIC_USER/PASS | HMAC (optional): header X-Sinch-Signature with secret SINCH_INBOUND_HMAC_SECRET | . Example JSON payload (simplified): . { \"id\": \"abcd-1234\", \"from\": \"+15551230000\", \"to\": \"+15559870000\", \"num_pages\": 2, \"status\": \"received\", \"file_url\": \"https://fax.api.sinch.com/v3/...\" } . HMAC verification (Python): . import hmac, hashlib secret = SINCH_INBOUND_HMAC_SECRET.encode() digest = hmac.new(secret, raw_body_bytes, hashlib.sha256).hexdigest() assert hmac.compare_digest(digest, header_value.strip().lower()) . ",
    "url": "/Faxbot/backends/webhooks.html#inbound--sinch-fax-api-v3",
    
    "relUrl": "/backends/webhooks.html#inbound--sinch-fax-api-v3"
  },"215": {
    "doc": "Webhooks",
    "title": "Inbound — SIP/Asterisk (Self‑Hosted)",
    "content": ". | Endpoint: POST /_internal/asterisk/inbound | Header: X-Internal-Secret: &lt;ASTERISK_INBOUND_SECRET&gt; | Body (JSON): { \"tiff_path\": \"/faxdata/in.tiff\", \"to_number\": \"+15559870000\", \"from_number\": \"+15551230000\", \"faxstatus\": \"received\", \"faxpages\": 2, \"uniqueid\": \"1603261234.89\" } . | . Example curl (internal network): . curl -X POST -H 'X-Internal-Secret: &lt;secret&gt;' -H 'Content-Type: application/json' \\ http://api:8080/_internal/asterisk/inbound \\ -d '{\"tiff_path\":\"/faxdata/in.tiff\",\"to_number\":\"+1555...\"}' . ",
    "url": "/Faxbot/backends/webhooks.html#inbound--sipasterisk-selfhosted",
    
    "relUrl": "/backends/webhooks.html#inbound--sipasterisk-selfhosted"
  },"216": {
    "doc": "Webhooks",
    "title": "Security Tips",
    "content": ". | Use HTTPS for all public callbacks. | Keep secrets out of logs; audit only metadata (job ids, event types). | Rotate webhook secrets periodically and validate signatures strictly. | . ",
    "url": "/Faxbot/backends/webhooks.html#security-tips",
    
    "relUrl": "/backends/webhooks.html#security-tips"
  }
}
