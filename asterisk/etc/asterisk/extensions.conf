[general]
static=yes
writeprotect=no
autofallthrough=yes

[globals]

; Main fax out context. Originate to Local/s@faxout with variables DEST and FAXFILE and JOBID
[faxout]
exten => s,1,NoOp(Fax outbound to ${DEST} file ${FAXFILE} job ${JOBID})
 same => n,Set(CHANNEL(hangup_handler_push)=fax-hangup,s,1(${JOBID}))
 same => n,Set(LOCALHEADERINFO=${ENV(FAX_HEADER)})
 same => n,Set(LOCALSTATIONID=${ENV(FAX_LOCAL_STATION_ID)})
 same => n,NoOp(Dialing PJSIP/${DEST}@trunk-endpoint)
 same => n,Dial(PJSIP/${DEST}@trunk-endpoint,60,U(faxsend^${FAXFILE}^${JOBID}))
 same => n,Hangup()

; Runs on answer in caller leg
[faxsend]
exten => s,1,NoOp(Begin SendFAX for job ${ARG2} using ${ARG1})
 same => n,Set(FAXOPT(headerinfo)=${LOCALHEADERINFO})
 same => n,Set(FAXOPT(localstationid)=${LOCALSTATIONID})
 same => n,Set(FAXOPT(ecm)=yes)
same => n,SendFAX(${ARG1},d)
 same => n,NoOp(SendFAX done status ${FAXSTATUS} error ${FAXERROR} pages ${FAXPAGES})
 same => n,UserEvent(FaxResult,JobID:${ARG2},Status:${FAXSTATUS},Error:${FAXERROR},Pages:${FAXPAGES})
 same => n,Return()

; Ensure we log something on hangup as well
[fax-hangup]
exten => s,1,NoOp(Hangup for job ${ARG1} cause ${HANGUPCAUSE})
 same => n,Return()
